 

//----------------------------------------------------------------------------------------------------
// <auto-generated> 
//     This code was generated by a T4 template: EnumerableAssert.Auto.tt
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated. 
// </auto-generated> 
//----------------------------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace DogmaMix.Core.UnitTesting
{
    public static partial class EnumerableAssert
    {
        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.Contains(ICollection,Object)"/> method.
        /// </summary>
        public static void Contains<T>(IEnumerable<T> sequence, T element)
        {
            CollectionAssert.Contains(sequence?.ToList(), element);
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.Contains(ICollection,Object,String)"/> method.
        /// </summary>
        public static void Contains<T>(IEnumerable<T> sequence, T element, String message)
        {
            CollectionAssert.Contains(sequence?.ToList(), element, message);
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.Contains(ICollection,Object,String,Object[])"/> method.
        /// </summary>
        public static void Contains<T>(IEnumerable<T> sequence, T element, String message, Object[] parameters)
        {
            CollectionAssert.Contains(sequence?.ToList(), element, message, parameters);
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.DoesNotContain(ICollection,Object)"/> method.
        /// </summary>
        public static void DoesNotContain<T>(IEnumerable<T> sequence, T element)
        {
            CollectionAssert.DoesNotContain(sequence?.ToList(), element);
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.DoesNotContain(ICollection,Object,String)"/> method.
        /// </summary>
        public static void DoesNotContain<T>(IEnumerable<T> sequence, T element, String message)
        {
            CollectionAssert.DoesNotContain(sequence?.ToList(), element, message);
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.DoesNotContain(ICollection,Object,String,Object[])"/> method.
        /// </summary>
        public static void DoesNotContain<T>(IEnumerable<T> sequence, T element, String message, Object[] parameters)
        {
            CollectionAssert.DoesNotContain(sequence?.ToList(), element, message, parameters);
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.AllItemsAreNotNull(ICollection)"/> method.
        /// </summary>
        public static void AllItemsAreNotNull<T>(IEnumerable<T> sequence)
        {
            CollectionAssert.AllItemsAreNotNull(sequence?.ToList());
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.AllItemsAreNotNull(ICollection,String)"/> method.
        /// </summary>
        public static void AllItemsAreNotNull<T>(IEnumerable<T> sequence, String message)
        {
            CollectionAssert.AllItemsAreNotNull(sequence?.ToList(), message);
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.AllItemsAreNotNull(ICollection,String,Object[])"/> method.
        /// </summary>
        public static void AllItemsAreNotNull<T>(IEnumerable<T> sequence, String message, Object[] parameters)
        {
            CollectionAssert.AllItemsAreNotNull(sequence?.ToList(), message, parameters);
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.AllItemsAreUnique(ICollection)"/> method.
        /// </summary>
        public static void AllItemsAreUnique<T>(IEnumerable<T> sequence)
        {
            CollectionAssert.AllItemsAreUnique(sequence?.ToList());
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.AllItemsAreUnique(ICollection,String)"/> method.
        /// </summary>
        public static void AllItemsAreUnique<T>(IEnumerable<T> sequence, String message)
        {
            CollectionAssert.AllItemsAreUnique(sequence?.ToList(), message);
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.AllItemsAreUnique(ICollection,String,Object[])"/> method.
        /// </summary>
        public static void AllItemsAreUnique<T>(IEnumerable<T> sequence, String message, Object[] parameters)
        {
            CollectionAssert.AllItemsAreUnique(sequence?.ToList(), message, parameters);
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.IsSubsetOf(ICollection,ICollection)"/> method.
        /// </summary>
        public static void IsSubsetOf<T>(IEnumerable<T> subset, IEnumerable<T> superset)
        {
            CollectionAssert.IsSubsetOf(subset?.ToList(), superset?.ToList());
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.IsSubsetOf(ICollection,ICollection,String)"/> method.
        /// </summary>
        public static void IsSubsetOf<T>(IEnumerable<T> subset, IEnumerable<T> superset, String message)
        {
            CollectionAssert.IsSubsetOf(subset?.ToList(), superset?.ToList(), message);
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.IsSubsetOf(ICollection,ICollection,String,Object[])"/> method.
        /// </summary>
        public static void IsSubsetOf<T>(IEnumerable<T> subset, IEnumerable<T> superset, String message, Object[] parameters)
        {
            CollectionAssert.IsSubsetOf(subset?.ToList(), superset?.ToList(), message, parameters);
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.IsNotSubsetOf(ICollection,ICollection)"/> method.
        /// </summary>
        public static void IsNotSubsetOf<T>(IEnumerable<T> subset, IEnumerable<T> superset)
        {
            CollectionAssert.IsNotSubsetOf(subset?.ToList(), superset?.ToList());
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.IsNotSubsetOf(ICollection,ICollection,String)"/> method.
        /// </summary>
        public static void IsNotSubsetOf<T>(IEnumerable<T> subset, IEnumerable<T> superset, String message)
        {
            CollectionAssert.IsNotSubsetOf(subset?.ToList(), superset?.ToList(), message);
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.IsNotSubsetOf(ICollection,ICollection,String,Object[])"/> method.
        /// </summary>
        public static void IsNotSubsetOf<T>(IEnumerable<T> subset, IEnumerable<T> superset, String message, Object[] parameters)
        {
            CollectionAssert.IsNotSubsetOf(subset?.ToList(), superset?.ToList(), message, parameters);
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.AreEquivalent(ICollection,ICollection)"/> method.
        /// </summary>
        public static void AreEquivalent<T>(IEnumerable<T> expected, IEnumerable<T> actual)
        {
            CollectionAssert.AreEquivalent(expected?.ToList(), actual?.ToList());
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.AreEquivalent(ICollection,ICollection,String)"/> method.
        /// </summary>
        public static void AreEquivalent<T>(IEnumerable<T> expected, IEnumerable<T> actual, String message)
        {
            CollectionAssert.AreEquivalent(expected?.ToList(), actual?.ToList(), message);
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.AreEquivalent(ICollection,ICollection,String,Object[])"/> method.
        /// </summary>
        public static void AreEquivalent<T>(IEnumerable<T> expected, IEnumerable<T> actual, String message, Object[] parameters)
        {
            CollectionAssert.AreEquivalent(expected?.ToList(), actual?.ToList(), message, parameters);
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.AreNotEquivalent(ICollection,ICollection)"/> method.
        /// </summary>
        public static void AreNotEquivalent<T>(IEnumerable<T> expected, IEnumerable<T> actual)
        {
            CollectionAssert.AreNotEquivalent(expected?.ToList(), actual?.ToList());
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.AreNotEquivalent(ICollection,ICollection,String)"/> method.
        /// </summary>
        public static void AreNotEquivalent<T>(IEnumerable<T> expected, IEnumerable<T> actual, String message)
        {
            CollectionAssert.AreNotEquivalent(expected?.ToList(), actual?.ToList(), message);
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.AreNotEquivalent(ICollection,ICollection,String,Object[])"/> method.
        /// </summary>
        public static void AreNotEquivalent<T>(IEnumerable<T> expected, IEnumerable<T> actual, String message, Object[] parameters)
        {
            CollectionAssert.AreNotEquivalent(expected?.ToList(), actual?.ToList(), message, parameters);
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.AllItemsAreInstancesOfType(ICollection,Type)"/> method.
        /// </summary>
        public static void AllItemsAreInstancesOfType<T>(IEnumerable<T> sequence, Type expectedType)
        {
            CollectionAssert.AllItemsAreInstancesOfType(sequence?.ToList(), expectedType);
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.AllItemsAreInstancesOfType(ICollection,Type,String)"/> method.
        /// </summary>
        public static void AllItemsAreInstancesOfType<T>(IEnumerable<T> sequence, Type expectedType, String message)
        {
            CollectionAssert.AllItemsAreInstancesOfType(sequence?.ToList(), expectedType, message);
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.AllItemsAreInstancesOfType(ICollection,Type,String,Object[])"/> method.
        /// </summary>
        public static void AllItemsAreInstancesOfType<T>(IEnumerable<T> sequence, Type expectedType, String message, Object[] parameters)
        {
            CollectionAssert.AllItemsAreInstancesOfType(sequence?.ToList(), expectedType, message, parameters);
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.AreEqual(ICollection,ICollection)"/> method.
        /// </summary>
        public static void AreEqual<T>(IEnumerable<T> expected, IEnumerable<T> actual)
        {
            CollectionAssert.AreEqual(expected?.ToList(), actual?.ToList());
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.AreEqual(ICollection,ICollection,String)"/> method.
        /// </summary>
        public static void AreEqual<T>(IEnumerable<T> expected, IEnumerable<T> actual, String message)
        {
            CollectionAssert.AreEqual(expected?.ToList(), actual?.ToList(), message);
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.AreEqual(ICollection,ICollection,String,Object[])"/> method.
        /// </summary>
        public static void AreEqual<T>(IEnumerable<T> expected, IEnumerable<T> actual, String message, Object[] parameters)
        {
            CollectionAssert.AreEqual(expected?.ToList(), actual?.ToList(), message, parameters);
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.AreNotEqual(ICollection,ICollection)"/> method.
        /// </summary>
        public static void AreNotEqual<T>(IEnumerable<T> notExpected, IEnumerable<T> actual)
        {
            CollectionAssert.AreNotEqual(notExpected?.ToList(), actual?.ToList());
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.AreNotEqual(ICollection,ICollection,String)"/> method.
        /// </summary>
        public static void AreNotEqual<T>(IEnumerable<T> notExpected, IEnumerable<T> actual, String message)
        {
            CollectionAssert.AreNotEqual(notExpected?.ToList(), actual?.ToList(), message);
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.AreNotEqual(ICollection,ICollection,String,Object[])"/> method.
        /// </summary>
        public static void AreNotEqual<T>(IEnumerable<T> notExpected, IEnumerable<T> actual, String message, Object[] parameters)
        {
            CollectionAssert.AreNotEqual(notExpected?.ToList(), actual?.ToList(), message, parameters);
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.AreEqual(ICollection,ICollection,IComparer)"/> method.
        /// </summary>
        public static void AreEqual<T>(IEnumerable<T> expected, IEnumerable<T> actual, IComparer<T> comparer)
        {
            CollectionAssert.AreEqual(expected?.ToList(), actual?.ToList(), ComparerWrapper<T>.Create(comparer));
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.AreEqual(ICollection,ICollection,IComparer,String)"/> method.
        /// </summary>
        public static void AreEqual<T>(IEnumerable<T> expected, IEnumerable<T> actual, IComparer<T> comparer, String message)
        {
            CollectionAssert.AreEqual(expected?.ToList(), actual?.ToList(), ComparerWrapper<T>.Create(comparer), message);
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.AreEqual(ICollection,ICollection,IComparer,String,Object[])"/> method.
        /// </summary>
        public static void AreEqual<T>(IEnumerable<T> expected, IEnumerable<T> actual, IComparer<T> comparer, String message, Object[] parameters)
        {
            CollectionAssert.AreEqual(expected?.ToList(), actual?.ToList(), ComparerWrapper<T>.Create(comparer), message, parameters);
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.AreNotEqual(ICollection,ICollection,IComparer)"/> method.
        /// </summary>
        public static void AreNotEqual<T>(IEnumerable<T> notExpected, IEnumerable<T> actual, IComparer<T> comparer)
        {
            CollectionAssert.AreNotEqual(notExpected?.ToList(), actual?.ToList(), ComparerWrapper<T>.Create(comparer));
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.AreNotEqual(ICollection,ICollection,IComparer,String)"/> method.
        /// </summary>
        public static void AreNotEqual<T>(IEnumerable<T> notExpected, IEnumerable<T> actual, IComparer<T> comparer, String message)
        {
            CollectionAssert.AreNotEqual(notExpected?.ToList(), actual?.ToList(), ComparerWrapper<T>.Create(comparer), message);
        }

        /// <summary>
        /// Wrapper for the <see cref="CollectionAssert.AreNotEqual(ICollection,ICollection,IComparer,String,Object[])"/> method.
        /// </summary>
        public static void AreNotEqual<T>(IEnumerable<T> notExpected, IEnumerable<T> actual, IComparer<T> comparer, String message, Object[] parameters)
        {
            CollectionAssert.AreNotEqual(notExpected?.ToList(), actual?.ToList(), ComparerWrapper<T>.Create(comparer), message, parameters);
        }

        /// <summary>
        /// Wraps an <see cref="IComparer{T}"/> instance such that it can be accessed through 
        /// the non-generic <see cref="IComparer"/> interface.
        /// </summary>
        private sealed class ComparerWrapper<T> : Comparer<T>
        {
            private IComparer<T> _comparer;

            public static ComparerWrapper<T> Create(IComparer<T> comparer)
            {
                // Let nulls be handled by the CollectionAssert class.
                if (comparer == null)
                    return null;

                var wrapper = new ComparerWrapper<T>();
                wrapper._comparer = comparer;
                return wrapper;
            }

            public override int Compare(T x, T y)
            {
                return _comparer.Compare(x, y);
            }
        }
    }
}
 
