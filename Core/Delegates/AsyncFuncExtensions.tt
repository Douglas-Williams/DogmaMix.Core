<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ include file="ActionFuncUtility.tt" once="true" #>

//----------------------------------------------------------------------------------------------------
// <auto-generated> 
//     This code was generated by a T4 template: <#= Path.GetFileName(Host.TemplateFile) #>
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated. 
// </auto-generated> 
//----------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace DogmaMix.Core.Extensions
{
    /// <summary>
    /// Provides extension methods for asynchronous action delegates 
    /// (<see cref="Func{TTask}"/>, <see cref="Func{T, TTask}"/>, <see cref="Func{T1, T2, TTask}"/>, <see cref="Func{T1, T2, T3, TTask}"/>, …,
    /// where <c>TTask</c> is of type <see cref="Task{TResult}"/>).
    /// </summary>
    public static class AsyncFuncExtensions
    {
<#
    var funcDelegates = GetFuncDelegates();
    foreach (var func in funcDelegates)
    {
#>
        /// <summary>
        /// Transforms the asynchronous function delegate to deliver all exceptions asynchronously, 
        /// through the returned <see cref="Task{TResult}"/>.
        /// This includes exceptions thrown from the synchronous part of the original asynchronous delegate,
        /// which would otherwise be thrown directly to the caller as soon as the delegate is invoked.
        /// </summary>
<#
        WriteTypeParamDoc(func, includeResult: true);
#>
        /// <param name="asyncFunc">The asynchronous function delegate to be transformed.</param>
        /// <returns>The asynchronous function delegate encapsulating <paramref name="asyncFunc"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncFunc"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="AsyncActionExtensions.DeliverAsync(Func{Task})"/> extension method.
        /// </remarks>
        public static Func<#=ConcatTypeParameters(func, result => "Task<" + result + ">")#> DeliverAsync<#=ConcatTypeParameters(func)#>(this Func<#=ConcatTypeParameters(func, result => "Task<" + result + ">")#> asyncFunc)
        {
            ArgumentValidate.NotNull(asyncFunc, nameof(asyncFunc));
                        
            return async (<#=ConcatInvokeParameters(func)#>) =>
                await asyncFunc(<#=ConcatInvokeArguments(func)#>).ConfigureAwait(false);
        }

<#
    }
#>
    }
}
