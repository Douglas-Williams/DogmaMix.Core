


//----------------------------------------------------------------------------------------------------
// <auto-generated> 
//     This code was generated by a T4 template: AsyncFuncExtensions.tt
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated. 
// </auto-generated> 
//----------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace DogmaMix.Core.Extensions
{
    /// <summary>
    /// Provides extension methods for asynchronous action delegates 
    /// (<see cref="Func{TTask}"/>, <see cref="Func{T, TTask}"/>, <see cref="Func{T1, T2, TTask}"/>, <see cref="Func{T1, T2, T3, TTask}"/>, …,
    /// where <c>TTask</c> is of type <see cref="Task{TResult}"/>).
    /// </summary>
    public static class AsyncFuncExtensions
    {
        /// <summary>
        /// Transforms the asynchronous function delegate to deliver all exceptions asynchronously, 
        /// through the returned <see cref="Task{TResult}"/>.
        /// This includes exceptions thrown from the synchronous part of the original asynchronous delegate,
        /// which would otherwise be thrown directly to the caller as soon as the delegate is invoked.
        /// </summary>
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="asyncFunc">The asynchronous function delegate to be transformed.</param>
        /// <returns>The asynchronous function delegate encapsulating <paramref name="asyncFunc"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncFunc"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="AsyncActionExtensions.DeliverAsync(Func{Task})"/> extension method.
        /// </remarks>
        public static Func<Task<TResult>> DeliverAsync<TResult>(this Func<Task<TResult>> asyncFunc)
        {
            ArgumentValidate.NotNull(asyncFunc, nameof(asyncFunc));
                        
            return async () =>
            { 
                return await asyncFunc().ConfigureAwait(false);
            };
        }

        /// <summary>
        /// Transforms the asynchronous function delegate to deliver all exceptions asynchronously, 
        /// through the returned <see cref="Task{TResult}"/>.
        /// This includes exceptions thrown from the synchronous part of the original asynchronous delegate,
        /// which would otherwise be thrown directly to the caller as soon as the delegate is invoked.
        /// </summary>
        /// <typeparam name="T">The type of the parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="asyncFunc">The asynchronous function delegate to be transformed.</param>
        /// <returns>The asynchronous function delegate encapsulating <paramref name="asyncFunc"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncFunc"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="AsyncActionExtensions.DeliverAsync(Func{Task})"/> extension method.
        /// </remarks>
        public static Func<T, Task<TResult>> DeliverAsync<T, TResult>(this Func<T, Task<TResult>> asyncFunc)
        {
            ArgumentValidate.NotNull(asyncFunc, nameof(asyncFunc));
                        
            return async (T arg) =>
            { 
                return await asyncFunc(arg).ConfigureAwait(false);
            };
        }

        /// <summary>
        /// Transforms the asynchronous function delegate to deliver all exceptions asynchronously, 
        /// through the returned <see cref="Task{TResult}"/>.
        /// This includes exceptions thrown from the synchronous part of the original asynchronous delegate,
        /// which would otherwise be thrown directly to the caller as soon as the delegate is invoked.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="asyncFunc">The asynchronous function delegate to be transformed.</param>
        /// <returns>The asynchronous function delegate encapsulating <paramref name="asyncFunc"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncFunc"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="AsyncActionExtensions.DeliverAsync(Func{Task})"/> extension method.
        /// </remarks>
        public static Func<T1, T2, Task<TResult>> DeliverAsync<T1, T2, TResult>(this Func<T1, T2, Task<TResult>> asyncFunc)
        {
            ArgumentValidate.NotNull(asyncFunc, nameof(asyncFunc));
                        
            return async (T1 arg1, T2 arg2) =>
            { 
                return await asyncFunc(arg1, arg2).ConfigureAwait(false);
            };
        }

        /// <summary>
        /// Transforms the asynchronous function delegate to deliver all exceptions asynchronously, 
        /// through the returned <see cref="Task{TResult}"/>.
        /// This includes exceptions thrown from the synchronous part of the original asynchronous delegate,
        /// which would otherwise be thrown directly to the caller as soon as the delegate is invoked.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="asyncFunc">The asynchronous function delegate to be transformed.</param>
        /// <returns>The asynchronous function delegate encapsulating <paramref name="asyncFunc"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncFunc"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="AsyncActionExtensions.DeliverAsync(Func{Task})"/> extension method.
        /// </remarks>
        public static Func<T1, T2, T3, Task<TResult>> DeliverAsync<T1, T2, T3, TResult>(this Func<T1, T2, T3, Task<TResult>> asyncFunc)
        {
            ArgumentValidate.NotNull(asyncFunc, nameof(asyncFunc));
                        
            return async (T1 arg1, T2 arg2, T3 arg3) =>
            { 
                return await asyncFunc(arg1, arg2, arg3).ConfigureAwait(false);
            };
        }

        /// <summary>
        /// Transforms the asynchronous function delegate to deliver all exceptions asynchronously, 
        /// through the returned <see cref="Task{TResult}"/>.
        /// This includes exceptions thrown from the synchronous part of the original asynchronous delegate,
        /// which would otherwise be thrown directly to the caller as soon as the delegate is invoked.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="asyncFunc">The asynchronous function delegate to be transformed.</param>
        /// <returns>The asynchronous function delegate encapsulating <paramref name="asyncFunc"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncFunc"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="AsyncActionExtensions.DeliverAsync(Func{Task})"/> extension method.
        /// </remarks>
        public static Func<T1, T2, T3, T4, Task<TResult>> DeliverAsync<T1, T2, T3, T4, TResult>(this Func<T1, T2, T3, T4, Task<TResult>> asyncFunc)
        {
            ArgumentValidate.NotNull(asyncFunc, nameof(asyncFunc));
                        
            return async (T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
            { 
                return await asyncFunc(arg1, arg2, arg3, arg4).ConfigureAwait(false);
            };
        }

        /// <summary>
        /// Transforms the asynchronous function delegate to deliver all exceptions asynchronously, 
        /// through the returned <see cref="Task{TResult}"/>.
        /// This includes exceptions thrown from the synchronous part of the original asynchronous delegate,
        /// which would otherwise be thrown directly to the caller as soon as the delegate is invoked.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="asyncFunc">The asynchronous function delegate to be transformed.</param>
        /// <returns>The asynchronous function delegate encapsulating <paramref name="asyncFunc"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncFunc"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="AsyncActionExtensions.DeliverAsync(Func{Task})"/> extension method.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, Task<TResult>> DeliverAsync<T1, T2, T3, T4, T5, TResult>(this Func<T1, T2, T3, T4, T5, Task<TResult>> asyncFunc)
        {
            ArgumentValidate.NotNull(asyncFunc, nameof(asyncFunc));
                        
            return async (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
            { 
                return await asyncFunc(arg1, arg2, arg3, arg4, arg5).ConfigureAwait(false);
            };
        }

        /// <summary>
        /// Transforms the asynchronous function delegate to deliver all exceptions asynchronously, 
        /// through the returned <see cref="Task{TResult}"/>.
        /// This includes exceptions thrown from the synchronous part of the original asynchronous delegate,
        /// which would otherwise be thrown directly to the caller as soon as the delegate is invoked.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="asyncFunc">The asynchronous function delegate to be transformed.</param>
        /// <returns>The asynchronous function delegate encapsulating <paramref name="asyncFunc"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncFunc"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="AsyncActionExtensions.DeliverAsync(Func{Task})"/> extension method.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, Task<TResult>> DeliverAsync<T1, T2, T3, T4, T5, T6, TResult>(this Func<T1, T2, T3, T4, T5, T6, Task<TResult>> asyncFunc)
        {
            ArgumentValidate.NotNull(asyncFunc, nameof(asyncFunc));
                        
            return async (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
            { 
                return await asyncFunc(arg1, arg2, arg3, arg4, arg5, arg6).ConfigureAwait(false);
            };
        }

        /// <summary>
        /// Transforms the asynchronous function delegate to deliver all exceptions asynchronously, 
        /// through the returned <see cref="Task{TResult}"/>.
        /// This includes exceptions thrown from the synchronous part of the original asynchronous delegate,
        /// which would otherwise be thrown directly to the caller as soon as the delegate is invoked.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="asyncFunc">The asynchronous function delegate to be transformed.</param>
        /// <returns>The asynchronous function delegate encapsulating <paramref name="asyncFunc"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncFunc"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="AsyncActionExtensions.DeliverAsync(Func{Task})"/> extension method.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, Task<TResult>> DeliverAsync<T1, T2, T3, T4, T5, T6, T7, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, Task<TResult>> asyncFunc)
        {
            ArgumentValidate.NotNull(asyncFunc, nameof(asyncFunc));
                        
            return async (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
            { 
                return await asyncFunc(arg1, arg2, arg3, arg4, arg5, arg6, arg7).ConfigureAwait(false);
            };
        }

        /// <summary>
        /// Transforms the asynchronous function delegate to deliver all exceptions asynchronously, 
        /// through the returned <see cref="Task{TResult}"/>.
        /// This includes exceptions thrown from the synchronous part of the original asynchronous delegate,
        /// which would otherwise be thrown directly to the caller as soon as the delegate is invoked.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="asyncFunc">The asynchronous function delegate to be transformed.</param>
        /// <returns>The asynchronous function delegate encapsulating <paramref name="asyncFunc"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncFunc"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="AsyncActionExtensions.DeliverAsync(Func{Task})"/> extension method.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, Task<TResult>> DeliverAsync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, Task<TResult>> asyncFunc)
        {
            ArgumentValidate.NotNull(asyncFunc, nameof(asyncFunc));
                        
            return async (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) =>
            { 
                return await asyncFunc(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8).ConfigureAwait(false);
            };
        }

        /// <summary>
        /// Transforms the asynchronous function delegate to deliver all exceptions asynchronously, 
        /// through the returned <see cref="Task{TResult}"/>.
        /// This includes exceptions thrown from the synchronous part of the original asynchronous delegate,
        /// which would otherwise be thrown directly to the caller as soon as the delegate is invoked.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="asyncFunc">The asynchronous function delegate to be transformed.</param>
        /// <returns>The asynchronous function delegate encapsulating <paramref name="asyncFunc"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncFunc"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="AsyncActionExtensions.DeliverAsync(Func{Task})"/> extension method.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, Task<TResult>> DeliverAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, Task<TResult>> asyncFunc)
        {
            ArgumentValidate.NotNull(asyncFunc, nameof(asyncFunc));
                        
            return async (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) =>
            { 
                return await asyncFunc(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9).ConfigureAwait(false);
            };
        }

        /// <summary>
        /// Transforms the asynchronous function delegate to deliver all exceptions asynchronously, 
        /// through the returned <see cref="Task{TResult}"/>.
        /// This includes exceptions thrown from the synchronous part of the original asynchronous delegate,
        /// which would otherwise be thrown directly to the caller as soon as the delegate is invoked.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="asyncFunc">The asynchronous function delegate to be transformed.</param>
        /// <returns>The asynchronous function delegate encapsulating <paramref name="asyncFunc"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncFunc"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="AsyncActionExtensions.DeliverAsync(Func{Task})"/> extension method.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Task<TResult>> DeliverAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Task<TResult>> asyncFunc)
        {
            ArgumentValidate.NotNull(asyncFunc, nameof(asyncFunc));
                        
            return async (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) =>
            { 
                return await asyncFunc(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10).ConfigureAwait(false);
            };
        }

        /// <summary>
        /// Transforms the asynchronous function delegate to deliver all exceptions asynchronously, 
        /// through the returned <see cref="Task{TResult}"/>.
        /// This includes exceptions thrown from the synchronous part of the original asynchronous delegate,
        /// which would otherwise be thrown directly to the caller as soon as the delegate is invoked.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T11">The type of the eleventh parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="asyncFunc">The asynchronous function delegate to be transformed.</param>
        /// <returns>The asynchronous function delegate encapsulating <paramref name="asyncFunc"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncFunc"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="AsyncActionExtensions.DeliverAsync(Func{Task})"/> extension method.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Task<TResult>> DeliverAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Task<TResult>> asyncFunc)
        {
            ArgumentValidate.NotNull(asyncFunc, nameof(asyncFunc));
                        
            return async (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) =>
            { 
                return await asyncFunc(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11).ConfigureAwait(false);
            };
        }

        /// <summary>
        /// Transforms the asynchronous function delegate to deliver all exceptions asynchronously, 
        /// through the returned <see cref="Task{TResult}"/>.
        /// This includes exceptions thrown from the synchronous part of the original asynchronous delegate,
        /// which would otherwise be thrown directly to the caller as soon as the delegate is invoked.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T11">The type of the eleventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T12">The type of the twelfth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="asyncFunc">The asynchronous function delegate to be transformed.</param>
        /// <returns>The asynchronous function delegate encapsulating <paramref name="asyncFunc"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncFunc"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="AsyncActionExtensions.DeliverAsync(Func{Task})"/> extension method.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Task<TResult>> DeliverAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Task<TResult>> asyncFunc)
        {
            ArgumentValidate.NotNull(asyncFunc, nameof(asyncFunc));
                        
            return async (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) =>
            { 
                return await asyncFunc(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12).ConfigureAwait(false);
            };
        }

        /// <summary>
        /// Transforms the asynchronous function delegate to deliver all exceptions asynchronously, 
        /// through the returned <see cref="Task{TResult}"/>.
        /// This includes exceptions thrown from the synchronous part of the original asynchronous delegate,
        /// which would otherwise be thrown directly to the caller as soon as the delegate is invoked.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T11">The type of the eleventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T12">The type of the twelfth parameter of the delegate.</typeparam>        
        /// <typeparam name="T13">The type of the thirteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="asyncFunc">The asynchronous function delegate to be transformed.</param>
        /// <returns>The asynchronous function delegate encapsulating <paramref name="asyncFunc"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncFunc"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="AsyncActionExtensions.DeliverAsync(Func{Task})"/> extension method.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Task<TResult>> DeliverAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Task<TResult>> asyncFunc)
        {
            ArgumentValidate.NotNull(asyncFunc, nameof(asyncFunc));
                        
            return async (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) =>
            { 
                return await asyncFunc(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13).ConfigureAwait(false);
            };
        }

        /// <summary>
        /// Transforms the asynchronous function delegate to deliver all exceptions asynchronously, 
        /// through the returned <see cref="Task{TResult}"/>.
        /// This includes exceptions thrown from the synchronous part of the original asynchronous delegate,
        /// which would otherwise be thrown directly to the caller as soon as the delegate is invoked.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T11">The type of the eleventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T12">The type of the twelfth parameter of the delegate.</typeparam>        
        /// <typeparam name="T13">The type of the thirteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T14">The type of the fourteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="asyncFunc">The asynchronous function delegate to be transformed.</param>
        /// <returns>The asynchronous function delegate encapsulating <paramref name="asyncFunc"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncFunc"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="AsyncActionExtensions.DeliverAsync(Func{Task})"/> extension method.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Task<TResult>> DeliverAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Task<TResult>> asyncFunc)
        {
            ArgumentValidate.NotNull(asyncFunc, nameof(asyncFunc));
                        
            return async (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) =>
            { 
                return await asyncFunc(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14).ConfigureAwait(false);
            };
        }

        /// <summary>
        /// Transforms the asynchronous function delegate to deliver all exceptions asynchronously, 
        /// through the returned <see cref="Task{TResult}"/>.
        /// This includes exceptions thrown from the synchronous part of the original asynchronous delegate,
        /// which would otherwise be thrown directly to the caller as soon as the delegate is invoked.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T11">The type of the eleventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T12">The type of the twelfth parameter of the delegate.</typeparam>        
        /// <typeparam name="T13">The type of the thirteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T14">The type of the fourteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T15">The type of the fifteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="asyncFunc">The asynchronous function delegate to be transformed.</param>
        /// <returns>The asynchronous function delegate encapsulating <paramref name="asyncFunc"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncFunc"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="AsyncActionExtensions.DeliverAsync(Func{Task})"/> extension method.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, Task<TResult>> DeliverAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, Task<TResult>> asyncFunc)
        {
            ArgumentValidate.NotNull(asyncFunc, nameof(asyncFunc));
                        
            return async (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) =>
            { 
                return await asyncFunc(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15).ConfigureAwait(false);
            };
        }

        /// <summary>
        /// Transforms the asynchronous function delegate to deliver all exceptions asynchronously, 
        /// through the returned <see cref="Task{TResult}"/>.
        /// This includes exceptions thrown from the synchronous part of the original asynchronous delegate,
        /// which would otherwise be thrown directly to the caller as soon as the delegate is invoked.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T11">The type of the eleventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T12">The type of the twelfth parameter of the delegate.</typeparam>        
        /// <typeparam name="T13">The type of the thirteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T14">The type of the fourteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T15">The type of the fifteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T16">The type of the sixteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="asyncFunc">The asynchronous function delegate to be transformed.</param>
        /// <returns>The asynchronous function delegate encapsulating <paramref name="asyncFunc"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncFunc"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="AsyncActionExtensions.DeliverAsync(Func{Task})"/> extension method.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, Task<TResult>> DeliverAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, Task<TResult>> asyncFunc)
        {
            ArgumentValidate.NotNull(asyncFunc, nameof(asyncFunc));
                        
            return async (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) =>
            { 
                return await asyncFunc(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16).ConfigureAwait(false);
            };
        }

    }
}
