<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension="/" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>

<#+
// This template provides utility methods for the other templates to invoke.

private static TypeInfo[] GetActionDelegates()
{
    // Action to Action`8 are defined in mscorlib
    // Action`9 to Action`16 are defined in System.Core
    var mscorlibDelegates = typeof(Action).Assembly.ExportedTypes;
    var systemCoreDelegates = typeof(Action<,,,,,,,,>).Assembly.ExportedTypes;
            
    var actionDelegates = mscorlibDelegates
        .Union(systemCoreDelegates)
        .Where(t => t.Name == "Action" || t.Name.StartsWith("Action`"))
        .Select(t => t.GetTypeInfo())
        .OrderBy(t => t.GenericTypeParameters.Length)
        .ToArray();

    return actionDelegates;
}

private static TypeInfo[] GetFuncDelegates()
{
    // Func`1 to Func`9 are defined in mscorlib
    // Func`10 to Func`17 are defined in System.Core
    var mscorlibDelegates = typeof(Func<>).Assembly.ExportedTypes;
    var systemCoreDelegates = typeof(Func<,,,,,,,,,>).Assembly.ExportedTypes;
            
    var funcDelegates = mscorlibDelegates
        .Union(systemCoreDelegates)
        .Where(t => t.Name.StartsWith("Func`"))
        .Select(t => t.GetTypeInfo())
        .OrderBy(t => t.GenericTypeParameters.Length)
        .ToArray();
    
    return funcDelegates;
}

private void WriteTypeParamDoc(TypeInfo @delegate, bool includeResult = true)
{
    bool isFunc = @delegate.Name.StartsWith("Func`");

    int paramCount = @delegate.GenericTypeParameters.Length;
    if (isFunc)
        paramCount--;

    for (int paramIndex = 0; paramIndex < paramCount; paramIndex++)
    {
        var paramType = @delegate.GenericTypeParameters[paramIndex];
#>
        /// <typeparam name="<#=paramType.Name#>">The type of the <#=paramCount == 1 ? "" : GetOrdinal(paramIndex + 1) + " "#>parameter of the delegate.</typeparam>        
<#+
    }     
    
    if (isFunc && includeResult)
    {
        var returnType = @delegate.GenericTypeParameters.Last();
#>
        /// <typeparam name="<#=returnType.Name#>">The type of the return value of the delegate.</typeparam>        
<#+
    }
}

private static string ConcatTypeParameters(TypeInfo @delegate, Func<string, string> transformResult)
{
    return ConcatTypeParameters(@delegate, null, transformResult);
}

private static string ConcatTypeParameters(TypeInfo @delegate, string append = null, Func<string, string> transformResult = null)
{
    bool isFunc = @delegate.Name.StartsWith("Func`");

    var parameters = @delegate
        .GenericTypeParameters
        .Select(t => t.Name)
        .ToList();

    if (isFunc && transformResult != null)
    {
        int lastIndex = @delegate.GenericTypeParameters.Length - 1;
        parameters[lastIndex] = transformResult(parameters[lastIndex]);
        if (parameters[lastIndex] == null)
            parameters.RemoveAt(lastIndex);
    }

    if (append != null)
        parameters.Add(append);

    if (!parameters.Any())
        return "";

    return "<" + string.Join(", ", parameters) + ">";
}

private static string ConcatInvokeParameters(TypeInfo @delegate)
{
    var parameters = @delegate
        .GetMethod("Invoke")
        .GetParameters()
        .Select(p => p.ParameterType.Name + " " + p.Name)
        .ToList();

    return string.Join(", ", parameters);
}

private static string ConcatInvokeArguments(TypeInfo @delegate)
{
    var parameters = @delegate
        .GetMethod("Invoke")
        .GetParameters()
        .Select(p => p.Name)
        .ToList();

    return string.Join(", ", parameters);
}

private static string GetOrdinal(int num)
{
    switch (num)
    {
        case 1: return "first";
        case 2: return "second";
        case 3: return "third";
        case 4: return "fourth";
        case 5: return "fifth";
        case 6: return "sixth";
        case 7: return "seventh";
        case 8: return "eighth";
        case 9: return "ninth";
        case 10: return "tenth";
        case 11: return "eleventh";
        case 12: return "twelfth";
        case 13: return "thirteenth";
        case 14: return "fourteenth";
        case 15: return "fifteenth";
        case 16: return "sixteenth";
        default: return num.ToString() + "th";
    }
}
#>