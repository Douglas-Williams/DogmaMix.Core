


//----------------------------------------------------------------------------------------------------
// <auto-generated> 
//     This code was generated by a T4 template: ActionExtensions.tt
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated. 
// </auto-generated> 
//----------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace DogmaMix.Core.Extensions
{
    /// <summary>
    /// Provides extension methods for action delegates 
    /// (<see cref="Action"/>, <see cref="Action{T}"/>, <see cref="Action{T1, T2}"/>, <see cref="Action{T1, T2, T3}"/>, …).
    /// </summary>
    public static class ActionExtensions
    {
        /// <summary>
        /// Creates a function delegate that executes the specified action delegate 
        /// and returns the specified result upon completion.
        /// </summary>
        /// <typeparam name="TResult">The type of the result that the function delegate will return.</typeparam>
        /// <param name="action">The action delegate to be executed by the function delegate.</param>
        /// <param name="result">The result that the function delegate will return.</param>
        /// <returns>The function delegate encapsulating <paramref name="action"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// <para>
        /// This method does not immediately execute the <paramref name="action"/> delegate.
        /// Rather, <paramref name="action"/> is encapsulated within a function delegate,
        /// and will be executed when the latter is invoked.
        /// In the case of an unhandled exception thrown by <paramref name="action"/>,
        /// the exception is propagated to the caller of the function delegate;
        /// <paramref name="result"/> would not be returned.
        /// </para>
        /// <para>
        /// This method is convenient when implementing a pair of method overloads for some delegate-based functionality,
        /// with one overload taking an <see cref="Action"/> parameter, and the other a <see cref="Func{TResult}"/>,
        /// such as is the case for <see cref="Task.Run(Action)"/> and <see cref="Task.Run{TResult}(Func{TResult})"/>.
        /// The action overload can be implemented by calling this <see cref="Return{TResult}(Action, TResult)"/> method
        /// on the <see cref="Action"/> argument to convert it to a <see cref="Func{TResult}"/> delegate returning an arbitrary value,
        /// and then passing the created function delegate to the function overload.
        /// </para>
        /// </remarks>
        /// <example>
        /// <code>
        /// public static void DoSomething(Action action)
        /// {
        ///     ArgumentValidate.NotNull(action, nameof(action));
        ///
        ///     DoSomething(action.Return(true));
        /// }
        /// 
        /// public static TResult DoSomething&lt;TResult&gt;(Func&lt;TResult&gt; func)
        /// {
        ///     ArgumentValidate.NotNull(func, nameof(func));
        ///
        ///     // preprocessing
        ///
        ///     try
        ///     {
        ///         return func();
        ///     }
        ///     finally
        ///     {
        ///         // postprocessing
        ///     }
        /// }
        /// </code>
        /// </example>
        public static Func<TResult> Return<TResult>(this Action action, TResult result)
        {
            ArgumentValidate.NotNull(action, nameof(action));

            return () =>
            {
                action();
                return result;
            };
        }

        /// <summary>
        /// Creates an asynchronous delegate that executes the specified action delegate synchronously
        /// and returns a task that indicates successful completion (like <see cref="Task.CompletedTask"/>).
        /// </summary>
        /// <param name="action">The action delegate to be executed synchronously by the asynchronous delegate.</param>
        /// <returns>The asynchronous delegate encapsulating <paramref name="action"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// <para>
        /// This method does not immediately execute the <paramref name="action"/> delegate.
        /// Rather, <paramref name="action"/> is encapsulated within an asynchronous delegate,
        /// and will be executed when the latter is invoked.
        /// In the case of an unhandled exception thrown by <paramref name="action"/>,
        /// the exception is propagated to the caller of the asynchronous delegate.
        /// </para>
        /// <para>
        /// The asynchronous delegate created by this method is just a <see cref="Task"/>-returning wrapper over the 
        /// <paramref name="action"/> delegate. It <i>does not</i> queue the specified work to run on the thread pool.
        /// For such functionality, use the <see cref="Task.Run(Action)"/> method of the <see cref="Task"/> class.
        /// </para>
        /// <para>
        /// The asynchronous delegate created by this method delivers exceptions synchronously.
        /// This means that, if <paramref name="action"/> throws an unhandled exception, it will be propagated directly to its caller,
        /// and not encapsulated in the returned <see cref="Task"/> (making it <see cref="TaskStatus.Faulted"/>).
        /// To get exceptions delivered asynchronously through the returned <see cref="Task"/>, use the 
        /// <see cref="AsyncActionExtensions.DeliverAsync(Func{Task})"/> extension method on the created delegate.
        /// </para>
        /// <para>
        /// This method is convenient when implementing a pair of method overloads for some delegate-based functionality,
        /// with one overload taking an <see cref="Action"/> parameter, and the other an asynchronous <see cref="Func{Task}"/>,
        /// such as is the case for <see cref="Task.Run(Action)"/> and <see cref="Task.Run(Func{Task})"/>.
        /// The action overload can be implemented by calling this <see cref="WrapAsync(Action)"/> method
        /// on the <see cref="Action"/> argument to convert it to an asynchronous <see cref="Func{Task}"/> delegate 
        /// returning a completed task, and then passing the created delegate to the asynchronous overload.
        /// </para>
        /// </remarks>
        /// <example>
        /// <code>
        /// public static void DoSomething(Action action)
        /// {
        ///     ArgumentValidate.NotNull(action, nameof(action));
        ///
        ///     var asyncFunc = action.WrapAsync();
        ///     var task = DoSomething(asyncFunc);
        ///     task.GetAwaiter().GetResult();   // task is always completed; returns immediately
        /// }
        /// 
        /// public static async Task DoSomething(Func&lt;Task&gt; asyncAction)
        /// {
        ///     ArgumentValidate.NotNull(asyncAction, nameof(asyncAction));
        ///
        ///     // preprocessing
        ///
        ///     try
        ///     {
        ///         await asyncAction().ConfigureAwait(false);
        ///     }
        ///     finally
        ///     {
        ///         // postprocessing
        ///     }
        /// }
        /// </code>
        /// </example>
        public static Func<Task> WrapAsync(this Action action)
        {
            ArgumentValidate.NotNull(action, nameof(action));

            return () =>
            {
                action();
                return Task.CompletedTask;
            };
        }

        /// <summary>
        /// Creates a function delegate that executes the specified action delegate 
        /// and returns the specified result upon completion.
        /// </summary>
        /// <typeparam name="T">The type of the parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the result that the function delegate will return.</typeparam>
        /// <param name="action">The action delegate to be executed by the function delegate.</param>
        /// <param name="result">The result that the function delegate will return.</param>
        /// <returns>The function delegate encapsulating <paramref name="action"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="Return{TResult}(Action, TResult)"/> overload.
        /// </remarks>
        public static Func<T, TResult> Return<T, TResult>(this Action<T> action, TResult result)
        {
            ArgumentValidate.NotNull(action, nameof(action));

            return (T obj) =>
            {
                action(obj);
                return result;
            };
        }

        /// <summary>
        /// Creates an asynchronous delegate that executes the specified action delegate synchronously
        /// and returns a task that indicates successful completion (like <see cref="Task.CompletedTask"/>).
        /// </summary>
        /// <typeparam name="T">The type of the parameter of the delegate.</typeparam>        
        /// <param name="action">The action delegate to be executed synchronously by the asynchronous delegate.</param>
        /// <returns>The asynchronous delegate encapsulating <paramref name="action"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="WrapAsync(Action)"/> overload.
        /// </remarks>
        public static Func<T, Task> WrapAsync<T>(this Action<T> action)
        {
            ArgumentValidate.NotNull(action, nameof(action));

            return (T obj) =>
            {
                action(obj);
                return Task.CompletedTask;
            };
        }

        /// <summary>
        /// Creates a function delegate that executes the specified action delegate 
        /// and returns the specified result upon completion.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the result that the function delegate will return.</typeparam>
        /// <param name="action">The action delegate to be executed by the function delegate.</param>
        /// <param name="result">The result that the function delegate will return.</param>
        /// <returns>The function delegate encapsulating <paramref name="action"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="Return{TResult}(Action, TResult)"/> overload.
        /// </remarks>
        public static Func<T1, T2, TResult> Return<T1, T2, TResult>(this Action<T1, T2> action, TResult result)
        {
            ArgumentValidate.NotNull(action, nameof(action));

            return (T1 arg1, T2 arg2) =>
            {
                action(arg1, arg2);
                return result;
            };
        }

        /// <summary>
        /// Creates an asynchronous delegate that executes the specified action delegate synchronously
        /// and returns a task that indicates successful completion (like <see cref="Task.CompletedTask"/>).
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <param name="action">The action delegate to be executed synchronously by the asynchronous delegate.</param>
        /// <returns>The asynchronous delegate encapsulating <paramref name="action"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="WrapAsync(Action)"/> overload.
        /// </remarks>
        public static Func<T1, T2, Task> WrapAsync<T1, T2>(this Action<T1, T2> action)
        {
            ArgumentValidate.NotNull(action, nameof(action));

            return (T1 arg1, T2 arg2) =>
            {
                action(arg1, arg2);
                return Task.CompletedTask;
            };
        }

        /// <summary>
        /// Creates a function delegate that executes the specified action delegate 
        /// and returns the specified result upon completion.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the result that the function delegate will return.</typeparam>
        /// <param name="action">The action delegate to be executed by the function delegate.</param>
        /// <param name="result">The result that the function delegate will return.</param>
        /// <returns>The function delegate encapsulating <paramref name="action"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="Return{TResult}(Action, TResult)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, TResult> Return<T1, T2, T3, TResult>(this Action<T1, T2, T3> action, TResult result)
        {
            ArgumentValidate.NotNull(action, nameof(action));

            return (T1 arg1, T2 arg2, T3 arg3) =>
            {
                action(arg1, arg2, arg3);
                return result;
            };
        }

        /// <summary>
        /// Creates an asynchronous delegate that executes the specified action delegate synchronously
        /// and returns a task that indicates successful completion (like <see cref="Task.CompletedTask"/>).
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <param name="action">The action delegate to be executed synchronously by the asynchronous delegate.</param>
        /// <returns>The asynchronous delegate encapsulating <paramref name="action"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="WrapAsync(Action)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, Task> WrapAsync<T1, T2, T3>(this Action<T1, T2, T3> action)
        {
            ArgumentValidate.NotNull(action, nameof(action));

            return (T1 arg1, T2 arg2, T3 arg3) =>
            {
                action(arg1, arg2, arg3);
                return Task.CompletedTask;
            };
        }

        /// <summary>
        /// Creates a function delegate that executes the specified action delegate 
        /// and returns the specified result upon completion.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the result that the function delegate will return.</typeparam>
        /// <param name="action">The action delegate to be executed by the function delegate.</param>
        /// <param name="result">The result that the function delegate will return.</param>
        /// <returns>The function delegate encapsulating <paramref name="action"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="Return{TResult}(Action, TResult)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, TResult> Return<T1, T2, T3, T4, TResult>(this Action<T1, T2, T3, T4> action, TResult result)
        {
            ArgumentValidate.NotNull(action, nameof(action));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
            {
                action(arg1, arg2, arg3, arg4);
                return result;
            };
        }

        /// <summary>
        /// Creates an asynchronous delegate that executes the specified action delegate synchronously
        /// and returns a task that indicates successful completion (like <see cref="Task.CompletedTask"/>).
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <param name="action">The action delegate to be executed synchronously by the asynchronous delegate.</param>
        /// <returns>The asynchronous delegate encapsulating <paramref name="action"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="WrapAsync(Action)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, Task> WrapAsync<T1, T2, T3, T4>(this Action<T1, T2, T3, T4> action)
        {
            ArgumentValidate.NotNull(action, nameof(action));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
            {
                action(arg1, arg2, arg3, arg4);
                return Task.CompletedTask;
            };
        }

        /// <summary>
        /// Creates a function delegate that executes the specified action delegate 
        /// and returns the specified result upon completion.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the result that the function delegate will return.</typeparam>
        /// <param name="action">The action delegate to be executed by the function delegate.</param>
        /// <param name="result">The result that the function delegate will return.</param>
        /// <returns>The function delegate encapsulating <paramref name="action"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="Return{TResult}(Action, TResult)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, TResult> Return<T1, T2, T3, T4, T5, TResult>(this Action<T1, T2, T3, T4, T5> action, TResult result)
        {
            ArgumentValidate.NotNull(action, nameof(action));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
            {
                action(arg1, arg2, arg3, arg4, arg5);
                return result;
            };
        }

        /// <summary>
        /// Creates an asynchronous delegate that executes the specified action delegate synchronously
        /// and returns a task that indicates successful completion (like <see cref="Task.CompletedTask"/>).
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <param name="action">The action delegate to be executed synchronously by the asynchronous delegate.</param>
        /// <returns>The asynchronous delegate encapsulating <paramref name="action"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="WrapAsync(Action)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, Task> WrapAsync<T1, T2, T3, T4, T5>(this Action<T1, T2, T3, T4, T5> action)
        {
            ArgumentValidate.NotNull(action, nameof(action));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
            {
                action(arg1, arg2, arg3, arg4, arg5);
                return Task.CompletedTask;
            };
        }

        /// <summary>
        /// Creates a function delegate that executes the specified action delegate 
        /// and returns the specified result upon completion.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the result that the function delegate will return.</typeparam>
        /// <param name="action">The action delegate to be executed by the function delegate.</param>
        /// <param name="result">The result that the function delegate will return.</param>
        /// <returns>The function delegate encapsulating <paramref name="action"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="Return{TResult}(Action, TResult)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, TResult> Return<T1, T2, T3, T4, T5, T6, TResult>(this Action<T1, T2, T3, T4, T5, T6> action, TResult result)
        {
            ArgumentValidate.NotNull(action, nameof(action));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
            {
                action(arg1, arg2, arg3, arg4, arg5, arg6);
                return result;
            };
        }

        /// <summary>
        /// Creates an asynchronous delegate that executes the specified action delegate synchronously
        /// and returns a task that indicates successful completion (like <see cref="Task.CompletedTask"/>).
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <param name="action">The action delegate to be executed synchronously by the asynchronous delegate.</param>
        /// <returns>The asynchronous delegate encapsulating <paramref name="action"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="WrapAsync(Action)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, Task> WrapAsync<T1, T2, T3, T4, T5, T6>(this Action<T1, T2, T3, T4, T5, T6> action)
        {
            ArgumentValidate.NotNull(action, nameof(action));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
            {
                action(arg1, arg2, arg3, arg4, arg5, arg6);
                return Task.CompletedTask;
            };
        }

        /// <summary>
        /// Creates a function delegate that executes the specified action delegate 
        /// and returns the specified result upon completion.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the result that the function delegate will return.</typeparam>
        /// <param name="action">The action delegate to be executed by the function delegate.</param>
        /// <param name="result">The result that the function delegate will return.</param>
        /// <returns>The function delegate encapsulating <paramref name="action"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="Return{TResult}(Action, TResult)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, TResult> Return<T1, T2, T3, T4, T5, T6, T7, TResult>(this Action<T1, T2, T3, T4, T5, T6, T7> action, TResult result)
        {
            ArgumentValidate.NotNull(action, nameof(action));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
            {
                action(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
                return result;
            };
        }

        /// <summary>
        /// Creates an asynchronous delegate that executes the specified action delegate synchronously
        /// and returns a task that indicates successful completion (like <see cref="Task.CompletedTask"/>).
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <param name="action">The action delegate to be executed synchronously by the asynchronous delegate.</param>
        /// <returns>The asynchronous delegate encapsulating <paramref name="action"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="WrapAsync(Action)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, Task> WrapAsync<T1, T2, T3, T4, T5, T6, T7>(this Action<T1, T2, T3, T4, T5, T6, T7> action)
        {
            ArgumentValidate.NotNull(action, nameof(action));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
            {
                action(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
                return Task.CompletedTask;
            };
        }

        /// <summary>
        /// Creates a function delegate that executes the specified action delegate 
        /// and returns the specified result upon completion.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the result that the function delegate will return.</typeparam>
        /// <param name="action">The action delegate to be executed by the function delegate.</param>
        /// <param name="result">The result that the function delegate will return.</param>
        /// <returns>The function delegate encapsulating <paramref name="action"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="Return{TResult}(Action, TResult)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> Return<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this Action<T1, T2, T3, T4, T5, T6, T7, T8> action, TResult result)
        {
            ArgumentValidate.NotNull(action, nameof(action));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) =>
            {
                action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
                return result;
            };
        }

        /// <summary>
        /// Creates an asynchronous delegate that executes the specified action delegate synchronously
        /// and returns a task that indicates successful completion (like <see cref="Task.CompletedTask"/>).
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <param name="action">The action delegate to be executed synchronously by the asynchronous delegate.</param>
        /// <returns>The asynchronous delegate encapsulating <paramref name="action"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="WrapAsync(Action)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, Task> WrapAsync<T1, T2, T3, T4, T5, T6, T7, T8>(this Action<T1, T2, T3, T4, T5, T6, T7, T8> action)
        {
            ArgumentValidate.NotNull(action, nameof(action));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) =>
            {
                action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
                return Task.CompletedTask;
            };
        }

        /// <summary>
        /// Creates a function delegate that executes the specified action delegate 
        /// and returns the specified result upon completion.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the result that the function delegate will return.</typeparam>
        /// <param name="action">The action delegate to be executed by the function delegate.</param>
        /// <param name="result">The result that the function delegate will return.</param>
        /// <returns>The function delegate encapsulating <paramref name="action"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="Return{TResult}(Action, TResult)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> Return<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> action, TResult result)
        {
            ArgumentValidate.NotNull(action, nameof(action));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) =>
            {
                action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
                return result;
            };
        }

        /// <summary>
        /// Creates an asynchronous delegate that executes the specified action delegate synchronously
        /// and returns a task that indicates successful completion (like <see cref="Task.CompletedTask"/>).
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <param name="action">The action delegate to be executed synchronously by the asynchronous delegate.</param>
        /// <returns>The asynchronous delegate encapsulating <paramref name="action"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="WrapAsync(Action)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, Task> WrapAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> action)
        {
            ArgumentValidate.NotNull(action, nameof(action));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) =>
            {
                action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
                return Task.CompletedTask;
            };
        }

        /// <summary>
        /// Creates a function delegate that executes the specified action delegate 
        /// and returns the specified result upon completion.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the result that the function delegate will return.</typeparam>
        /// <param name="action">The action delegate to be executed by the function delegate.</param>
        /// <param name="result">The result that the function delegate will return.</param>
        /// <returns>The function delegate encapsulating <paramref name="action"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="Return{TResult}(Action, TResult)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> Return<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(this Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action, TResult result)
        {
            ArgumentValidate.NotNull(action, nameof(action));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) =>
            {
                action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
                return result;
            };
        }

        /// <summary>
        /// Creates an asynchronous delegate that executes the specified action delegate synchronously
        /// and returns a task that indicates successful completion (like <see cref="Task.CompletedTask"/>).
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <param name="action">The action delegate to be executed synchronously by the asynchronous delegate.</param>
        /// <returns>The asynchronous delegate encapsulating <paramref name="action"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="WrapAsync(Action)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Task> WrapAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action)
        {
            ArgumentValidate.NotNull(action, nameof(action));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) =>
            {
                action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
                return Task.CompletedTask;
            };
        }

        /// <summary>
        /// Creates a function delegate that executes the specified action delegate 
        /// and returns the specified result upon completion.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T11">The type of the eleventh parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the result that the function delegate will return.</typeparam>
        /// <param name="action">The action delegate to be executed by the function delegate.</param>
        /// <param name="result">The result that the function delegate will return.</param>
        /// <returns>The function delegate encapsulating <paramref name="action"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="Return{TResult}(Action, TResult)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> Return<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(this Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action, TResult result)
        {
            ArgumentValidate.NotNull(action, nameof(action));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) =>
            {
                action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
                return result;
            };
        }

        /// <summary>
        /// Creates an asynchronous delegate that executes the specified action delegate synchronously
        /// and returns a task that indicates successful completion (like <see cref="Task.CompletedTask"/>).
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T11">The type of the eleventh parameter of the delegate.</typeparam>        
        /// <param name="action">The action delegate to be executed synchronously by the asynchronous delegate.</param>
        /// <returns>The asynchronous delegate encapsulating <paramref name="action"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="WrapAsync(Action)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Task> WrapAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action)
        {
            ArgumentValidate.NotNull(action, nameof(action));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) =>
            {
                action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
                return Task.CompletedTask;
            };
        }

        /// <summary>
        /// Creates a function delegate that executes the specified action delegate 
        /// and returns the specified result upon completion.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T11">The type of the eleventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T12">The type of the twelfth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the result that the function delegate will return.</typeparam>
        /// <param name="action">The action delegate to be executed by the function delegate.</param>
        /// <param name="result">The result that the function delegate will return.</param>
        /// <returns>The function delegate encapsulating <paramref name="action"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="Return{TResult}(Action, TResult)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> Return<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(this Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action, TResult result)
        {
            ArgumentValidate.NotNull(action, nameof(action));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) =>
            {
                action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
                return result;
            };
        }

        /// <summary>
        /// Creates an asynchronous delegate that executes the specified action delegate synchronously
        /// and returns a task that indicates successful completion (like <see cref="Task.CompletedTask"/>).
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T11">The type of the eleventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T12">The type of the twelfth parameter of the delegate.</typeparam>        
        /// <param name="action">The action delegate to be executed synchronously by the asynchronous delegate.</param>
        /// <returns>The asynchronous delegate encapsulating <paramref name="action"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="WrapAsync(Action)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Task> WrapAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action)
        {
            ArgumentValidate.NotNull(action, nameof(action));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) =>
            {
                action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
                return Task.CompletedTask;
            };
        }

        /// <summary>
        /// Creates a function delegate that executes the specified action delegate 
        /// and returns the specified result upon completion.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T11">The type of the eleventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T12">The type of the twelfth parameter of the delegate.</typeparam>        
        /// <typeparam name="T13">The type of the thirteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the result that the function delegate will return.</typeparam>
        /// <param name="action">The action delegate to be executed by the function delegate.</param>
        /// <param name="result">The result that the function delegate will return.</param>
        /// <returns>The function delegate encapsulating <paramref name="action"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="Return{TResult}(Action, TResult)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> Return<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(this Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action, TResult result)
        {
            ArgumentValidate.NotNull(action, nameof(action));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) =>
            {
                action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
                return result;
            };
        }

        /// <summary>
        /// Creates an asynchronous delegate that executes the specified action delegate synchronously
        /// and returns a task that indicates successful completion (like <see cref="Task.CompletedTask"/>).
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T11">The type of the eleventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T12">The type of the twelfth parameter of the delegate.</typeparam>        
        /// <typeparam name="T13">The type of the thirteenth parameter of the delegate.</typeparam>        
        /// <param name="action">The action delegate to be executed synchronously by the asynchronous delegate.</param>
        /// <returns>The asynchronous delegate encapsulating <paramref name="action"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="WrapAsync(Action)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Task> WrapAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action)
        {
            ArgumentValidate.NotNull(action, nameof(action));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) =>
            {
                action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
                return Task.CompletedTask;
            };
        }

        /// <summary>
        /// Creates a function delegate that executes the specified action delegate 
        /// and returns the specified result upon completion.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T11">The type of the eleventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T12">The type of the twelfth parameter of the delegate.</typeparam>        
        /// <typeparam name="T13">The type of the thirteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T14">The type of the fourteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the result that the function delegate will return.</typeparam>
        /// <param name="action">The action delegate to be executed by the function delegate.</param>
        /// <param name="result">The result that the function delegate will return.</param>
        /// <returns>The function delegate encapsulating <paramref name="action"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="Return{TResult}(Action, TResult)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> Return<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(this Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action, TResult result)
        {
            ArgumentValidate.NotNull(action, nameof(action));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) =>
            {
                action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
                return result;
            };
        }

        /// <summary>
        /// Creates an asynchronous delegate that executes the specified action delegate synchronously
        /// and returns a task that indicates successful completion (like <see cref="Task.CompletedTask"/>).
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T11">The type of the eleventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T12">The type of the twelfth parameter of the delegate.</typeparam>        
        /// <typeparam name="T13">The type of the thirteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T14">The type of the fourteenth parameter of the delegate.</typeparam>        
        /// <param name="action">The action delegate to be executed synchronously by the asynchronous delegate.</param>
        /// <returns>The asynchronous delegate encapsulating <paramref name="action"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="WrapAsync(Action)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Task> WrapAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action)
        {
            ArgumentValidate.NotNull(action, nameof(action));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) =>
            {
                action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
                return Task.CompletedTask;
            };
        }

        /// <summary>
        /// Creates a function delegate that executes the specified action delegate 
        /// and returns the specified result upon completion.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T11">The type of the eleventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T12">The type of the twelfth parameter of the delegate.</typeparam>        
        /// <typeparam name="T13">The type of the thirteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T14">The type of the fourteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T15">The type of the fifteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the result that the function delegate will return.</typeparam>
        /// <param name="action">The action delegate to be executed by the function delegate.</param>
        /// <param name="result">The result that the function delegate will return.</param>
        /// <returns>The function delegate encapsulating <paramref name="action"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="Return{TResult}(Action, TResult)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> Return<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(this Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action, TResult result)
        {
            ArgumentValidate.NotNull(action, nameof(action));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) =>
            {
                action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15);
                return result;
            };
        }

        /// <summary>
        /// Creates an asynchronous delegate that executes the specified action delegate synchronously
        /// and returns a task that indicates successful completion (like <see cref="Task.CompletedTask"/>).
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T11">The type of the eleventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T12">The type of the twelfth parameter of the delegate.</typeparam>        
        /// <typeparam name="T13">The type of the thirteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T14">The type of the fourteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T15">The type of the fifteenth parameter of the delegate.</typeparam>        
        /// <param name="action">The action delegate to be executed synchronously by the asynchronous delegate.</param>
        /// <returns>The asynchronous delegate encapsulating <paramref name="action"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="WrapAsync(Action)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, Task> WrapAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action)
        {
            ArgumentValidate.NotNull(action, nameof(action));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) =>
            {
                action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15);
                return Task.CompletedTask;
            };
        }

        /// <summary>
        /// Creates a function delegate that executes the specified action delegate 
        /// and returns the specified result upon completion.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T11">The type of the eleventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T12">The type of the twelfth parameter of the delegate.</typeparam>        
        /// <typeparam name="T13">The type of the thirteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T14">The type of the fourteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T15">The type of the fifteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T16">The type of the sixteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the result that the function delegate will return.</typeparam>
        /// <param name="action">The action delegate to be executed by the function delegate.</param>
        /// <param name="result">The result that the function delegate will return.</param>
        /// <returns>The function delegate encapsulating <paramref name="action"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="Return{TResult}(Action, TResult)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> Return<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(this Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action, TResult result)
        {
            ArgumentValidate.NotNull(action, nameof(action));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) =>
            {
                action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16);
                return result;
            };
        }

        /// <summary>
        /// Creates an asynchronous delegate that executes the specified action delegate synchronously
        /// and returns a task that indicates successful completion (like <see cref="Task.CompletedTask"/>).
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T11">The type of the eleventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T12">The type of the twelfth parameter of the delegate.</typeparam>        
        /// <typeparam name="T13">The type of the thirteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T14">The type of the fourteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T15">The type of the fifteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T16">The type of the sixteenth parameter of the delegate.</typeparam>        
        /// <param name="action">The action delegate to be executed synchronously by the asynchronous delegate.</param>
        /// <returns>The asynchronous delegate encapsulating <paramref name="action"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="WrapAsync(Action)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, Task> WrapAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action)
        {
            ArgumentValidate.NotNull(action, nameof(action));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) =>
            {
                action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16);
                return Task.CompletedTask;
            };
        }

    }
}
