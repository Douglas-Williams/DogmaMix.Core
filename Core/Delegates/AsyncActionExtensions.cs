


//----------------------------------------------------------------------------------------------------
// <auto-generated> 
//     This code was generated by a T4 template: AsyncActionExtensions.tt
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated. 
// </auto-generated> 
//----------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace DogmaMix.Core.Extensions
{
    /// <summary>
    /// Provides extension methods for asynchronous action delegates 
    /// (<see cref="Func{Task}"/>, <see cref="Func{T, Task}"/>, <see cref="Func{T1, T2, Task}"/>, <see cref="Func{T1, T2, T3, Task}"/>, …).
    /// </summary>
    public static class AsyncActionExtensions
    {
        /// <summary>
        /// Creates an asynchronous function delegate that executes the specified asynchronous action delegate 
        /// and returns the specified result upon completion.
        /// </summary>
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="asyncAction">The asynchronous action delegate to be executed by the asynchronous function delegate.</param>
        /// <param name="result">The result that the asynchronous function delegate will return.</param>
        /// <returns>The asynchronous function delegate encapsulating <paramref name="asyncAction"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncAction"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// <para>
        /// This method does not immediately execute the <paramref name="asyncAction"/> delegate.
        /// Rather, <paramref name="asyncAction"/> is encapsulated within an asynchronous function delegate,
        /// and will be executed when the latter is invoked.
        /// In the case of an unhandled exception thrown by <paramref name="asyncAction"/>,
        /// the exception is propagated to the caller of the asynchronous function delegate;
        /// <paramref name="result"/> would not be returned.
        /// </para>
        /// <para>
        /// This implementation in based on the <see href="https://stackoverflow.com/a/35633989/1149773">answer by Jon Skeet</see>.
        /// Exceptions that are thrown synchronously from the asynchronous action delegate
        /// will still get delivered synchronously from the asynchronous function delegate.
        /// To get exceptions delivered asynchronously through the returned <see cref="Task{TResult}"/>, use the 
        /// <see cref="AsyncActionExtensions.DeliverAsync(Func{Task})"/> extension method on the created delegate.
        /// </para>
        /// <list type="bullet">
        /// <listheader>References</listheader>
        /// <item><see href="https://stackoverflow.com/q/35633615/1149773">Convert asynchronous action to asynchronous function delegate, preserving synchronous exception delivery</see>, <i>Stack Overflow</i></item>
        /// </list>
        /// </remarks>
        public static Func<Task<TResult>> ReturnAsync<TResult>(this Func<Task> asyncAction, TResult result)
        {
            ArgumentValidate.NotNull(asyncAction, nameof(asyncAction));
                        
            return () =>
            {
                // Invoke asynchronous operation from synchronous part of wrapper.
                // This ensures that synchronous exceptions still get delivered synchronously. 
                var task = asyncAction();

                // Then create asynchronous wrapper to await the asynchronous operation and return the result.
                Func<Task<TResult>> asyncFunc = async () =>
                {
                    await task.ConfigureAwait(false);
                    return result;
                };

                return asyncFunc();
            };
        }

        /// <summary>
        /// Transforms the asynchronous action delegate to deliver all exceptions asynchronously, 
        /// through the returned <see cref="Task"/>.
        /// This includes exceptions thrown from the synchronous part of the original asynchronous delegate,
        /// which would otherwise be thrown directly to the caller as soon as the delegate is invoked.
        /// </summary>
        /// <param name="asyncAction">The asynchronous action delegate to be transformed.</param>
        /// <returns>The asynchronous action delegate encapsulating <paramref name="asyncAction"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncAction"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// <para>
        /// This extension method is useful when one requires all exceptions to be delivered consistently through the returned task.
        /// The point where exceptions get thrown makes a difference if the task is not being awaited immediately.
        /// Consider the following code:
        /// </para>
        /// <code>
        /// public async Task TestMethod()
        /// {
        ///     Task task = WriteAllBytesAsync(null, null);   // ArgumentNullException thrown here
        ///     // do more processing
        ///     await task;                                   // asynchronous exceptions thrown here
        /// }
        /// 
        /// public static Task WriteAllBytesAsync(string filePath, byte[] bytes)
        /// {
        ///     if (filePath == null)
        ///         throw new ArgumentNullException(filePath, nameof(filePath));
        ///     if (bytes == null)
        ///         throw new ArgumentNullException(filePath, nameof(bytes));
        /// 
        ///     return WriteAllBytesAsyncInner(filePath, bytes);
        /// }
        /// 
        /// private static async Task WriteAllBytesAsyncInner(string filePath, byte[] bytes)
        /// {
        ///     using (var fileStream = File.OpenWrite(filePath))
        ///         await fileStream.WriteAsync(bytes, 0, bytes.Length);
        /// }
        /// </code>
        /// <para>
        /// Since synchronous exceptions typically involve precondition check failures, 
        /// it is usually desirable for them to be delivered synchronously.
        /// Whenever it is not, this extension method may be used.
        /// </para>
        /// <list type="bullet">
        /// <listheader>References</listheader>
        /// <item><see href="https://stackoverflow.com/q/21033150/1149773">Any difference between “await Task.Run(); return;” and “return Task.Run()”?</see>, <i>Stack Overflow</i></item>
        /// <item><see href="https://stackoverflow.com/q/21661511/1149773">Contract agreement when implementing a method that returns a Task</see>, <i>Stack Overflow</i></item>
        /// <item><see href="https://stackoverflow.com/q/21055920/1149773">Handling exceptions from the synchronous part of async method</see>, <i>Stack Overflow</i></item>
        /// <item><see href="https://stackoverflow.com/q/35633615/1149773">Convert asynchronous action to asynchronous function delegate preserving synchronous exception delivery</see>, <i>Stack Overflow</i></item>
        /// </list>
        /// </remarks>
        public static Func<Task> DeliverAsync(this Func<Task> asyncAction)
        {
            ArgumentValidate.NotNull(asyncAction, nameof(asyncAction));
                        
            return async () =>
                await asyncAction().ConfigureAwait(false);
        }

        /// <summary>
        /// Creates an asynchronous function delegate that executes the specified asynchronous action delegate 
        /// and returns the specified result upon completion.
        /// </summary>
        /// <typeparam name="T">The type of the parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="asyncAction">The asynchronous action delegate to be executed by the asynchronous function delegate.</param>
        /// <param name="result">The result that the asynchronous function delegate will return.</param>
        /// <returns>The asynchronous function delegate encapsulating <paramref name="asyncAction"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncAction"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="ReturnAsync{TResult}(Func{Task}, TResult)"/> overload.
        /// </remarks>
        public static Func<T, Task<TResult>> ReturnAsync<T, TResult>(this Func<T, Task> asyncAction, TResult result)
        {
            ArgumentValidate.NotNull(asyncAction, nameof(asyncAction));
                        
            return (T arg) =>
            {
                // Invoke asynchronous operation from synchronous part of wrapper.
                // This ensures that synchronous exceptions still get delivered synchronously. 
                var task = asyncAction(arg);

                // Then create asynchronous wrapper to await the asynchronous operation and return the result.
                Func<Task<TResult>> asyncFunc = async () =>
                {
                    await task.ConfigureAwait(false);
                    return result;
                };

                return asyncFunc();
            };
        }

        /// <summary>
        /// Transforms the asynchronous action delegate to deliver all exceptions asynchronously, 
        /// through the returned <see cref="Task"/>.
        /// This includes exceptions thrown from the synchronous part of the original asynchronous delegate,
        /// which would otherwise be thrown directly to the caller as soon as the delegate is invoked.
        /// </summary>
        /// <typeparam name="T">The type of the parameter of the delegate.</typeparam>        
        /// <param name="asyncAction">The asynchronous action delegate to be transformed.</param>
        /// <returns>The asynchronous action delegate encapsulating <paramref name="asyncAction"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncAction"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="DeliverAsync(Func{Task})"/> overload.
        /// </remarks>
        public static Func<T, Task> DeliverAsync<T>(this Func<T, Task> asyncAction)
        {
            ArgumentValidate.NotNull(asyncAction, nameof(asyncAction));
                        
            return async (T arg) =>
                await asyncAction(arg).ConfigureAwait(false);
        }

        /// <summary>
        /// Creates an asynchronous function delegate that executes the specified asynchronous action delegate 
        /// and returns the specified result upon completion.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="asyncAction">The asynchronous action delegate to be executed by the asynchronous function delegate.</param>
        /// <param name="result">The result that the asynchronous function delegate will return.</param>
        /// <returns>The asynchronous function delegate encapsulating <paramref name="asyncAction"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncAction"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="ReturnAsync{TResult}(Func{Task}, TResult)"/> overload.
        /// </remarks>
        public static Func<T1, T2, Task<TResult>> ReturnAsync<T1, T2, TResult>(this Func<T1, T2, Task> asyncAction, TResult result)
        {
            ArgumentValidate.NotNull(asyncAction, nameof(asyncAction));
                        
            return (T1 arg1, T2 arg2) =>
            {
                // Invoke asynchronous operation from synchronous part of wrapper.
                // This ensures that synchronous exceptions still get delivered synchronously. 
                var task = asyncAction(arg1, arg2);

                // Then create asynchronous wrapper to await the asynchronous operation and return the result.
                Func<Task<TResult>> asyncFunc = async () =>
                {
                    await task.ConfigureAwait(false);
                    return result;
                };

                return asyncFunc();
            };
        }

        /// <summary>
        /// Transforms the asynchronous action delegate to deliver all exceptions asynchronously, 
        /// through the returned <see cref="Task"/>.
        /// This includes exceptions thrown from the synchronous part of the original asynchronous delegate,
        /// which would otherwise be thrown directly to the caller as soon as the delegate is invoked.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <param name="asyncAction">The asynchronous action delegate to be transformed.</param>
        /// <returns>The asynchronous action delegate encapsulating <paramref name="asyncAction"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncAction"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="DeliverAsync(Func{Task})"/> overload.
        /// </remarks>
        public static Func<T1, T2, Task> DeliverAsync<T1, T2>(this Func<T1, T2, Task> asyncAction)
        {
            ArgumentValidate.NotNull(asyncAction, nameof(asyncAction));
                        
            return async (T1 arg1, T2 arg2) =>
                await asyncAction(arg1, arg2).ConfigureAwait(false);
        }

        /// <summary>
        /// Creates an asynchronous function delegate that executes the specified asynchronous action delegate 
        /// and returns the specified result upon completion.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="asyncAction">The asynchronous action delegate to be executed by the asynchronous function delegate.</param>
        /// <param name="result">The result that the asynchronous function delegate will return.</param>
        /// <returns>The asynchronous function delegate encapsulating <paramref name="asyncAction"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncAction"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="ReturnAsync{TResult}(Func{Task}, TResult)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, Task<TResult>> ReturnAsync<T1, T2, T3, TResult>(this Func<T1, T2, T3, Task> asyncAction, TResult result)
        {
            ArgumentValidate.NotNull(asyncAction, nameof(asyncAction));
                        
            return (T1 arg1, T2 arg2, T3 arg3) =>
            {
                // Invoke asynchronous operation from synchronous part of wrapper.
                // This ensures that synchronous exceptions still get delivered synchronously. 
                var task = asyncAction(arg1, arg2, arg3);

                // Then create asynchronous wrapper to await the asynchronous operation and return the result.
                Func<Task<TResult>> asyncFunc = async () =>
                {
                    await task.ConfigureAwait(false);
                    return result;
                };

                return asyncFunc();
            };
        }

        /// <summary>
        /// Transforms the asynchronous action delegate to deliver all exceptions asynchronously, 
        /// through the returned <see cref="Task"/>.
        /// This includes exceptions thrown from the synchronous part of the original asynchronous delegate,
        /// which would otherwise be thrown directly to the caller as soon as the delegate is invoked.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <param name="asyncAction">The asynchronous action delegate to be transformed.</param>
        /// <returns>The asynchronous action delegate encapsulating <paramref name="asyncAction"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncAction"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="DeliverAsync(Func{Task})"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, Task> DeliverAsync<T1, T2, T3>(this Func<T1, T2, T3, Task> asyncAction)
        {
            ArgumentValidate.NotNull(asyncAction, nameof(asyncAction));
                        
            return async (T1 arg1, T2 arg2, T3 arg3) =>
                await asyncAction(arg1, arg2, arg3).ConfigureAwait(false);
        }

        /// <summary>
        /// Creates an asynchronous function delegate that executes the specified asynchronous action delegate 
        /// and returns the specified result upon completion.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="asyncAction">The asynchronous action delegate to be executed by the asynchronous function delegate.</param>
        /// <param name="result">The result that the asynchronous function delegate will return.</param>
        /// <returns>The asynchronous function delegate encapsulating <paramref name="asyncAction"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncAction"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="ReturnAsync{TResult}(Func{Task}, TResult)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, Task<TResult>> ReturnAsync<T1, T2, T3, T4, TResult>(this Func<T1, T2, T3, T4, Task> asyncAction, TResult result)
        {
            ArgumentValidate.NotNull(asyncAction, nameof(asyncAction));
                        
            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
            {
                // Invoke asynchronous operation from synchronous part of wrapper.
                // This ensures that synchronous exceptions still get delivered synchronously. 
                var task = asyncAction(arg1, arg2, arg3, arg4);

                // Then create asynchronous wrapper to await the asynchronous operation and return the result.
                Func<Task<TResult>> asyncFunc = async () =>
                {
                    await task.ConfigureAwait(false);
                    return result;
                };

                return asyncFunc();
            };
        }

        /// <summary>
        /// Transforms the asynchronous action delegate to deliver all exceptions asynchronously, 
        /// through the returned <see cref="Task"/>.
        /// This includes exceptions thrown from the synchronous part of the original asynchronous delegate,
        /// which would otherwise be thrown directly to the caller as soon as the delegate is invoked.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <param name="asyncAction">The asynchronous action delegate to be transformed.</param>
        /// <returns>The asynchronous action delegate encapsulating <paramref name="asyncAction"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncAction"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="DeliverAsync(Func{Task})"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, Task> DeliverAsync<T1, T2, T3, T4>(this Func<T1, T2, T3, T4, Task> asyncAction)
        {
            ArgumentValidate.NotNull(asyncAction, nameof(asyncAction));
                        
            return async (T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
                await asyncAction(arg1, arg2, arg3, arg4).ConfigureAwait(false);
        }

        /// <summary>
        /// Creates an asynchronous function delegate that executes the specified asynchronous action delegate 
        /// and returns the specified result upon completion.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="asyncAction">The asynchronous action delegate to be executed by the asynchronous function delegate.</param>
        /// <param name="result">The result that the asynchronous function delegate will return.</param>
        /// <returns>The asynchronous function delegate encapsulating <paramref name="asyncAction"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncAction"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="ReturnAsync{TResult}(Func{Task}, TResult)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, Task<TResult>> ReturnAsync<T1, T2, T3, T4, T5, TResult>(this Func<T1, T2, T3, T4, T5, Task> asyncAction, TResult result)
        {
            ArgumentValidate.NotNull(asyncAction, nameof(asyncAction));
                        
            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
            {
                // Invoke asynchronous operation from synchronous part of wrapper.
                // This ensures that synchronous exceptions still get delivered synchronously. 
                var task = asyncAction(arg1, arg2, arg3, arg4, arg5);

                // Then create asynchronous wrapper to await the asynchronous operation and return the result.
                Func<Task<TResult>> asyncFunc = async () =>
                {
                    await task.ConfigureAwait(false);
                    return result;
                };

                return asyncFunc();
            };
        }

        /// <summary>
        /// Transforms the asynchronous action delegate to deliver all exceptions asynchronously, 
        /// through the returned <see cref="Task"/>.
        /// This includes exceptions thrown from the synchronous part of the original asynchronous delegate,
        /// which would otherwise be thrown directly to the caller as soon as the delegate is invoked.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <param name="asyncAction">The asynchronous action delegate to be transformed.</param>
        /// <returns>The asynchronous action delegate encapsulating <paramref name="asyncAction"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncAction"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="DeliverAsync(Func{Task})"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, Task> DeliverAsync<T1, T2, T3, T4, T5>(this Func<T1, T2, T3, T4, T5, Task> asyncAction)
        {
            ArgumentValidate.NotNull(asyncAction, nameof(asyncAction));
                        
            return async (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
                await asyncAction(arg1, arg2, arg3, arg4, arg5).ConfigureAwait(false);
        }

        /// <summary>
        /// Creates an asynchronous function delegate that executes the specified asynchronous action delegate 
        /// and returns the specified result upon completion.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="asyncAction">The asynchronous action delegate to be executed by the asynchronous function delegate.</param>
        /// <param name="result">The result that the asynchronous function delegate will return.</param>
        /// <returns>The asynchronous function delegate encapsulating <paramref name="asyncAction"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncAction"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="ReturnAsync{TResult}(Func{Task}, TResult)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, Task<TResult>> ReturnAsync<T1, T2, T3, T4, T5, T6, TResult>(this Func<T1, T2, T3, T4, T5, T6, Task> asyncAction, TResult result)
        {
            ArgumentValidate.NotNull(asyncAction, nameof(asyncAction));
                        
            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
            {
                // Invoke asynchronous operation from synchronous part of wrapper.
                // This ensures that synchronous exceptions still get delivered synchronously. 
                var task = asyncAction(arg1, arg2, arg3, arg4, arg5, arg6);

                // Then create asynchronous wrapper to await the asynchronous operation and return the result.
                Func<Task<TResult>> asyncFunc = async () =>
                {
                    await task.ConfigureAwait(false);
                    return result;
                };

                return asyncFunc();
            };
        }

        /// <summary>
        /// Transforms the asynchronous action delegate to deliver all exceptions asynchronously, 
        /// through the returned <see cref="Task"/>.
        /// This includes exceptions thrown from the synchronous part of the original asynchronous delegate,
        /// which would otherwise be thrown directly to the caller as soon as the delegate is invoked.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <param name="asyncAction">The asynchronous action delegate to be transformed.</param>
        /// <returns>The asynchronous action delegate encapsulating <paramref name="asyncAction"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncAction"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="DeliverAsync(Func{Task})"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, Task> DeliverAsync<T1, T2, T3, T4, T5, T6>(this Func<T1, T2, T3, T4, T5, T6, Task> asyncAction)
        {
            ArgumentValidate.NotNull(asyncAction, nameof(asyncAction));
                        
            return async (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
                await asyncAction(arg1, arg2, arg3, arg4, arg5, arg6).ConfigureAwait(false);
        }

        /// <summary>
        /// Creates an asynchronous function delegate that executes the specified asynchronous action delegate 
        /// and returns the specified result upon completion.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="asyncAction">The asynchronous action delegate to be executed by the asynchronous function delegate.</param>
        /// <param name="result">The result that the asynchronous function delegate will return.</param>
        /// <returns>The asynchronous function delegate encapsulating <paramref name="asyncAction"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncAction"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="ReturnAsync{TResult}(Func{Task}, TResult)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, Task<TResult>> ReturnAsync<T1, T2, T3, T4, T5, T6, T7, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, Task> asyncAction, TResult result)
        {
            ArgumentValidate.NotNull(asyncAction, nameof(asyncAction));
                        
            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
            {
                // Invoke asynchronous operation from synchronous part of wrapper.
                // This ensures that synchronous exceptions still get delivered synchronously. 
                var task = asyncAction(arg1, arg2, arg3, arg4, arg5, arg6, arg7);

                // Then create asynchronous wrapper to await the asynchronous operation and return the result.
                Func<Task<TResult>> asyncFunc = async () =>
                {
                    await task.ConfigureAwait(false);
                    return result;
                };

                return asyncFunc();
            };
        }

        /// <summary>
        /// Transforms the asynchronous action delegate to deliver all exceptions asynchronously, 
        /// through the returned <see cref="Task"/>.
        /// This includes exceptions thrown from the synchronous part of the original asynchronous delegate,
        /// which would otherwise be thrown directly to the caller as soon as the delegate is invoked.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <param name="asyncAction">The asynchronous action delegate to be transformed.</param>
        /// <returns>The asynchronous action delegate encapsulating <paramref name="asyncAction"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncAction"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="DeliverAsync(Func{Task})"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, Task> DeliverAsync<T1, T2, T3, T4, T5, T6, T7>(this Func<T1, T2, T3, T4, T5, T6, T7, Task> asyncAction)
        {
            ArgumentValidate.NotNull(asyncAction, nameof(asyncAction));
                        
            return async (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
                await asyncAction(arg1, arg2, arg3, arg4, arg5, arg6, arg7).ConfigureAwait(false);
        }

        /// <summary>
        /// Creates an asynchronous function delegate that executes the specified asynchronous action delegate 
        /// and returns the specified result upon completion.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="asyncAction">The asynchronous action delegate to be executed by the asynchronous function delegate.</param>
        /// <param name="result">The result that the asynchronous function delegate will return.</param>
        /// <returns>The asynchronous function delegate encapsulating <paramref name="asyncAction"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncAction"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="ReturnAsync{TResult}(Func{Task}, TResult)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, Task<TResult>> ReturnAsync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, Task> asyncAction, TResult result)
        {
            ArgumentValidate.NotNull(asyncAction, nameof(asyncAction));
                        
            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) =>
            {
                // Invoke asynchronous operation from synchronous part of wrapper.
                // This ensures that synchronous exceptions still get delivered synchronously. 
                var task = asyncAction(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

                // Then create asynchronous wrapper to await the asynchronous operation and return the result.
                Func<Task<TResult>> asyncFunc = async () =>
                {
                    await task.ConfigureAwait(false);
                    return result;
                };

                return asyncFunc();
            };
        }

        /// <summary>
        /// Transforms the asynchronous action delegate to deliver all exceptions asynchronously, 
        /// through the returned <see cref="Task"/>.
        /// This includes exceptions thrown from the synchronous part of the original asynchronous delegate,
        /// which would otherwise be thrown directly to the caller as soon as the delegate is invoked.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <param name="asyncAction">The asynchronous action delegate to be transformed.</param>
        /// <returns>The asynchronous action delegate encapsulating <paramref name="asyncAction"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncAction"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="DeliverAsync(Func{Task})"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, Task> DeliverAsync<T1, T2, T3, T4, T5, T6, T7, T8>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, Task> asyncAction)
        {
            ArgumentValidate.NotNull(asyncAction, nameof(asyncAction));
                        
            return async (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) =>
                await asyncAction(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8).ConfigureAwait(false);
        }

        /// <summary>
        /// Creates an asynchronous function delegate that executes the specified asynchronous action delegate 
        /// and returns the specified result upon completion.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="asyncAction">The asynchronous action delegate to be executed by the asynchronous function delegate.</param>
        /// <param name="result">The result that the asynchronous function delegate will return.</param>
        /// <returns>The asynchronous function delegate encapsulating <paramref name="asyncAction"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncAction"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="ReturnAsync{TResult}(Func{Task}, TResult)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, Task<TResult>> ReturnAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, Task> asyncAction, TResult result)
        {
            ArgumentValidate.NotNull(asyncAction, nameof(asyncAction));
                        
            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) =>
            {
                // Invoke asynchronous operation from synchronous part of wrapper.
                // This ensures that synchronous exceptions still get delivered synchronously. 
                var task = asyncAction(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);

                // Then create asynchronous wrapper to await the asynchronous operation and return the result.
                Func<Task<TResult>> asyncFunc = async () =>
                {
                    await task.ConfigureAwait(false);
                    return result;
                };

                return asyncFunc();
            };
        }

        /// <summary>
        /// Transforms the asynchronous action delegate to deliver all exceptions asynchronously, 
        /// through the returned <see cref="Task"/>.
        /// This includes exceptions thrown from the synchronous part of the original asynchronous delegate,
        /// which would otherwise be thrown directly to the caller as soon as the delegate is invoked.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <param name="asyncAction">The asynchronous action delegate to be transformed.</param>
        /// <returns>The asynchronous action delegate encapsulating <paramref name="asyncAction"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncAction"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="DeliverAsync(Func{Task})"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, Task> DeliverAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, Task> asyncAction)
        {
            ArgumentValidate.NotNull(asyncAction, nameof(asyncAction));
                        
            return async (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) =>
                await asyncAction(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9).ConfigureAwait(false);
        }

        /// <summary>
        /// Creates an asynchronous function delegate that executes the specified asynchronous action delegate 
        /// and returns the specified result upon completion.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="asyncAction">The asynchronous action delegate to be executed by the asynchronous function delegate.</param>
        /// <param name="result">The result that the asynchronous function delegate will return.</param>
        /// <returns>The asynchronous function delegate encapsulating <paramref name="asyncAction"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncAction"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="ReturnAsync{TResult}(Func{Task}, TResult)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Task<TResult>> ReturnAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Task> asyncAction, TResult result)
        {
            ArgumentValidate.NotNull(asyncAction, nameof(asyncAction));
                        
            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) =>
            {
                // Invoke asynchronous operation from synchronous part of wrapper.
                // This ensures that synchronous exceptions still get delivered synchronously. 
                var task = asyncAction(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);

                // Then create asynchronous wrapper to await the asynchronous operation and return the result.
                Func<Task<TResult>> asyncFunc = async () =>
                {
                    await task.ConfigureAwait(false);
                    return result;
                };

                return asyncFunc();
            };
        }

        /// <summary>
        /// Transforms the asynchronous action delegate to deliver all exceptions asynchronously, 
        /// through the returned <see cref="Task"/>.
        /// This includes exceptions thrown from the synchronous part of the original asynchronous delegate,
        /// which would otherwise be thrown directly to the caller as soon as the delegate is invoked.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <param name="asyncAction">The asynchronous action delegate to be transformed.</param>
        /// <returns>The asynchronous action delegate encapsulating <paramref name="asyncAction"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncAction"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="DeliverAsync(Func{Task})"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Task> DeliverAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Task> asyncAction)
        {
            ArgumentValidate.NotNull(asyncAction, nameof(asyncAction));
                        
            return async (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) =>
                await asyncAction(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10).ConfigureAwait(false);
        }

        /// <summary>
        /// Creates an asynchronous function delegate that executes the specified asynchronous action delegate 
        /// and returns the specified result upon completion.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T11">The type of the eleventh parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="asyncAction">The asynchronous action delegate to be executed by the asynchronous function delegate.</param>
        /// <param name="result">The result that the asynchronous function delegate will return.</param>
        /// <returns>The asynchronous function delegate encapsulating <paramref name="asyncAction"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncAction"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="ReturnAsync{TResult}(Func{Task}, TResult)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Task<TResult>> ReturnAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Task> asyncAction, TResult result)
        {
            ArgumentValidate.NotNull(asyncAction, nameof(asyncAction));
                        
            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) =>
            {
                // Invoke asynchronous operation from synchronous part of wrapper.
                // This ensures that synchronous exceptions still get delivered synchronously. 
                var task = asyncAction(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);

                // Then create asynchronous wrapper to await the asynchronous operation and return the result.
                Func<Task<TResult>> asyncFunc = async () =>
                {
                    await task.ConfigureAwait(false);
                    return result;
                };

                return asyncFunc();
            };
        }

        /// <summary>
        /// Transforms the asynchronous action delegate to deliver all exceptions asynchronously, 
        /// through the returned <see cref="Task"/>.
        /// This includes exceptions thrown from the synchronous part of the original asynchronous delegate,
        /// which would otherwise be thrown directly to the caller as soon as the delegate is invoked.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T11">The type of the eleventh parameter of the delegate.</typeparam>        
        /// <param name="asyncAction">The asynchronous action delegate to be transformed.</param>
        /// <returns>The asynchronous action delegate encapsulating <paramref name="asyncAction"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncAction"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="DeliverAsync(Func{Task})"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Task> DeliverAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Task> asyncAction)
        {
            ArgumentValidate.NotNull(asyncAction, nameof(asyncAction));
                        
            return async (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) =>
                await asyncAction(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11).ConfigureAwait(false);
        }

        /// <summary>
        /// Creates an asynchronous function delegate that executes the specified asynchronous action delegate 
        /// and returns the specified result upon completion.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T11">The type of the eleventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T12">The type of the twelfth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="asyncAction">The asynchronous action delegate to be executed by the asynchronous function delegate.</param>
        /// <param name="result">The result that the asynchronous function delegate will return.</param>
        /// <returns>The asynchronous function delegate encapsulating <paramref name="asyncAction"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncAction"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="ReturnAsync{TResult}(Func{Task}, TResult)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Task<TResult>> ReturnAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Task> asyncAction, TResult result)
        {
            ArgumentValidate.NotNull(asyncAction, nameof(asyncAction));
                        
            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) =>
            {
                // Invoke asynchronous operation from synchronous part of wrapper.
                // This ensures that synchronous exceptions still get delivered synchronously. 
                var task = asyncAction(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);

                // Then create asynchronous wrapper to await the asynchronous operation and return the result.
                Func<Task<TResult>> asyncFunc = async () =>
                {
                    await task.ConfigureAwait(false);
                    return result;
                };

                return asyncFunc();
            };
        }

        /// <summary>
        /// Transforms the asynchronous action delegate to deliver all exceptions asynchronously, 
        /// through the returned <see cref="Task"/>.
        /// This includes exceptions thrown from the synchronous part of the original asynchronous delegate,
        /// which would otherwise be thrown directly to the caller as soon as the delegate is invoked.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T11">The type of the eleventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T12">The type of the twelfth parameter of the delegate.</typeparam>        
        /// <param name="asyncAction">The asynchronous action delegate to be transformed.</param>
        /// <returns>The asynchronous action delegate encapsulating <paramref name="asyncAction"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncAction"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="DeliverAsync(Func{Task})"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Task> DeliverAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Task> asyncAction)
        {
            ArgumentValidate.NotNull(asyncAction, nameof(asyncAction));
                        
            return async (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) =>
                await asyncAction(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12).ConfigureAwait(false);
        }

        /// <summary>
        /// Creates an asynchronous function delegate that executes the specified asynchronous action delegate 
        /// and returns the specified result upon completion.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T11">The type of the eleventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T12">The type of the twelfth parameter of the delegate.</typeparam>        
        /// <typeparam name="T13">The type of the thirteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="asyncAction">The asynchronous action delegate to be executed by the asynchronous function delegate.</param>
        /// <param name="result">The result that the asynchronous function delegate will return.</param>
        /// <returns>The asynchronous function delegate encapsulating <paramref name="asyncAction"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncAction"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="ReturnAsync{TResult}(Func{Task}, TResult)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Task<TResult>> ReturnAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Task> asyncAction, TResult result)
        {
            ArgumentValidate.NotNull(asyncAction, nameof(asyncAction));
                        
            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) =>
            {
                // Invoke asynchronous operation from synchronous part of wrapper.
                // This ensures that synchronous exceptions still get delivered synchronously. 
                var task = asyncAction(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);

                // Then create asynchronous wrapper to await the asynchronous operation and return the result.
                Func<Task<TResult>> asyncFunc = async () =>
                {
                    await task.ConfigureAwait(false);
                    return result;
                };

                return asyncFunc();
            };
        }

        /// <summary>
        /// Transforms the asynchronous action delegate to deliver all exceptions asynchronously, 
        /// through the returned <see cref="Task"/>.
        /// This includes exceptions thrown from the synchronous part of the original asynchronous delegate,
        /// which would otherwise be thrown directly to the caller as soon as the delegate is invoked.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T11">The type of the eleventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T12">The type of the twelfth parameter of the delegate.</typeparam>        
        /// <typeparam name="T13">The type of the thirteenth parameter of the delegate.</typeparam>        
        /// <param name="asyncAction">The asynchronous action delegate to be transformed.</param>
        /// <returns>The asynchronous action delegate encapsulating <paramref name="asyncAction"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncAction"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="DeliverAsync(Func{Task})"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Task> DeliverAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Task> asyncAction)
        {
            ArgumentValidate.NotNull(asyncAction, nameof(asyncAction));
                        
            return async (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) =>
                await asyncAction(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13).ConfigureAwait(false);
        }

        /// <summary>
        /// Creates an asynchronous function delegate that executes the specified asynchronous action delegate 
        /// and returns the specified result upon completion.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T11">The type of the eleventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T12">The type of the twelfth parameter of the delegate.</typeparam>        
        /// <typeparam name="T13">The type of the thirteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T14">The type of the fourteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="asyncAction">The asynchronous action delegate to be executed by the asynchronous function delegate.</param>
        /// <param name="result">The result that the asynchronous function delegate will return.</param>
        /// <returns>The asynchronous function delegate encapsulating <paramref name="asyncAction"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncAction"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="ReturnAsync{TResult}(Func{Task}, TResult)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Task<TResult>> ReturnAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Task> asyncAction, TResult result)
        {
            ArgumentValidate.NotNull(asyncAction, nameof(asyncAction));
                        
            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) =>
            {
                // Invoke asynchronous operation from synchronous part of wrapper.
                // This ensures that synchronous exceptions still get delivered synchronously. 
                var task = asyncAction(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);

                // Then create asynchronous wrapper to await the asynchronous operation and return the result.
                Func<Task<TResult>> asyncFunc = async () =>
                {
                    await task.ConfigureAwait(false);
                    return result;
                };

                return asyncFunc();
            };
        }

        /// <summary>
        /// Transforms the asynchronous action delegate to deliver all exceptions asynchronously, 
        /// through the returned <see cref="Task"/>.
        /// This includes exceptions thrown from the synchronous part of the original asynchronous delegate,
        /// which would otherwise be thrown directly to the caller as soon as the delegate is invoked.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T11">The type of the eleventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T12">The type of the twelfth parameter of the delegate.</typeparam>        
        /// <typeparam name="T13">The type of the thirteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T14">The type of the fourteenth parameter of the delegate.</typeparam>        
        /// <param name="asyncAction">The asynchronous action delegate to be transformed.</param>
        /// <returns>The asynchronous action delegate encapsulating <paramref name="asyncAction"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncAction"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="DeliverAsync(Func{Task})"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Task> DeliverAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Task> asyncAction)
        {
            ArgumentValidate.NotNull(asyncAction, nameof(asyncAction));
                        
            return async (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) =>
                await asyncAction(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14).ConfigureAwait(false);
        }

        /// <summary>
        /// Creates an asynchronous function delegate that executes the specified asynchronous action delegate 
        /// and returns the specified result upon completion.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T11">The type of the eleventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T12">The type of the twelfth parameter of the delegate.</typeparam>        
        /// <typeparam name="T13">The type of the thirteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T14">The type of the fourteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T15">The type of the fifteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="asyncAction">The asynchronous action delegate to be executed by the asynchronous function delegate.</param>
        /// <param name="result">The result that the asynchronous function delegate will return.</param>
        /// <returns>The asynchronous function delegate encapsulating <paramref name="asyncAction"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncAction"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="ReturnAsync{TResult}(Func{Task}, TResult)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, Task<TResult>> ReturnAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, Task> asyncAction, TResult result)
        {
            ArgumentValidate.NotNull(asyncAction, nameof(asyncAction));
                        
            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) =>
            {
                // Invoke asynchronous operation from synchronous part of wrapper.
                // This ensures that synchronous exceptions still get delivered synchronously. 
                var task = asyncAction(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15);

                // Then create asynchronous wrapper to await the asynchronous operation and return the result.
                Func<Task<TResult>> asyncFunc = async () =>
                {
                    await task.ConfigureAwait(false);
                    return result;
                };

                return asyncFunc();
            };
        }

        /// <summary>
        /// Transforms the asynchronous action delegate to deliver all exceptions asynchronously, 
        /// through the returned <see cref="Task"/>.
        /// This includes exceptions thrown from the synchronous part of the original asynchronous delegate,
        /// which would otherwise be thrown directly to the caller as soon as the delegate is invoked.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T11">The type of the eleventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T12">The type of the twelfth parameter of the delegate.</typeparam>        
        /// <typeparam name="T13">The type of the thirteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T14">The type of the fourteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T15">The type of the fifteenth parameter of the delegate.</typeparam>        
        /// <param name="asyncAction">The asynchronous action delegate to be transformed.</param>
        /// <returns>The asynchronous action delegate encapsulating <paramref name="asyncAction"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncAction"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="DeliverAsync(Func{Task})"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, Task> DeliverAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, Task> asyncAction)
        {
            ArgumentValidate.NotNull(asyncAction, nameof(asyncAction));
                        
            return async (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) =>
                await asyncAction(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15).ConfigureAwait(false);
        }

        /// <summary>
        /// Creates an asynchronous function delegate that executes the specified asynchronous action delegate 
        /// and returns the specified result upon completion.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T11">The type of the eleventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T12">The type of the twelfth parameter of the delegate.</typeparam>        
        /// <typeparam name="T13">The type of the thirteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T14">The type of the fourteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T15">The type of the fifteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T16">The type of the sixteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="asyncAction">The asynchronous action delegate to be executed by the asynchronous function delegate.</param>
        /// <param name="result">The result that the asynchronous function delegate will return.</param>
        /// <returns>The asynchronous function delegate encapsulating <paramref name="asyncAction"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncAction"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="ReturnAsync{TResult}(Func{Task}, TResult)"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, Task<TResult>> ReturnAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, Task> asyncAction, TResult result)
        {
            ArgumentValidate.NotNull(asyncAction, nameof(asyncAction));
                        
            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) =>
            {
                // Invoke asynchronous operation from synchronous part of wrapper.
                // This ensures that synchronous exceptions still get delivered synchronously. 
                var task = asyncAction(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16);

                // Then create asynchronous wrapper to await the asynchronous operation and return the result.
                Func<Task<TResult>> asyncFunc = async () =>
                {
                    await task.ConfigureAwait(false);
                    return result;
                };

                return asyncFunc();
            };
        }

        /// <summary>
        /// Transforms the asynchronous action delegate to deliver all exceptions asynchronously, 
        /// through the returned <see cref="Task"/>.
        /// This includes exceptions thrown from the synchronous part of the original asynchronous delegate,
        /// which would otherwise be thrown directly to the caller as soon as the delegate is invoked.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T11">The type of the eleventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T12">The type of the twelfth parameter of the delegate.</typeparam>        
        /// <typeparam name="T13">The type of the thirteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T14">The type of the fourteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T15">The type of the fifteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T16">The type of the sixteenth parameter of the delegate.</typeparam>        
        /// <param name="asyncAction">The asynchronous action delegate to be transformed.</param>
        /// <returns>The asynchronous action delegate encapsulating <paramref name="asyncAction"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="asyncAction"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="DeliverAsync(Func{Task})"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, Task> DeliverAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, Task> asyncAction)
        {
            ArgumentValidate.NotNull(asyncAction, nameof(asyncAction));
                        
            return async (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) =>
                await asyncAction(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16).ConfigureAwait(false);
        }

    }
}
