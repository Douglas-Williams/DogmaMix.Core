


//----------------------------------------------------------------------------------------------------
// <auto-generated> 
//     This code was generated by a T4 template: FuncExtensions.tt
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated. 
// </auto-generated> 
//----------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace DogmaMix.Core.Extensions
{
    /// <summary>
    /// Provides extension methods for function delegates 
    /// (<see cref="Func{TResult}"/>, <see cref="Func{T, TResult}"/>, <see cref="Func{T1, T2, TResult}"/>, <see cref="Func{T1, T2, T3, TResult}"/>, …).
    /// </summary>
    public static class FuncExtensions
    {
        /// <summary>
        /// Creates an asynchronous delegate that executes the specified function delegate synchronously
        /// and returns a task that has completed successfully with the said delegate's result
        /// (like through <see cref="Task.FromResult{TResult}(TResult)"/>).
        /// </summary>
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="func">The function delegate to be executed synchronously by the asynchronous delegate.</param>
        /// <returns>The asynchronous delegate encapsulating <paramref name="func"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// <para>
        /// This method does not immediately execute the <paramref name="func"/> delegate.
        /// Rather, <paramref name="func"/> is encapsulated within an asynchronous delegate,
        /// and will be executed when the latter is invoked.
        /// In the case of an unhandled exception thrown by <paramref name="func"/>,
        /// the exception is propagated to the caller of the asynchronous delegate.
        /// </para>
        /// <para>
        /// The asynchronous delegate created by this method is just a <see cref="Task{TResult}"/>-returning wrapper over the 
        /// <paramref name="func"/> delegate. It <i>does not</i> queue the specified work to run on the thread pool.
        /// For such functionality, use the <see cref="Task.Run{TResult}(Func{TResult})"/> method of the <see cref="Task"/> class.
        /// </para>
        /// <para>
        /// The asynchronous delegate created by this method delivers exceptions synchronously.
        /// This means that, if <paramref name="func"/> throws an unhandled exception, it will be propagated directly to its caller,
        /// and not encapsulated in the returned <see cref="Task{TResult}"/> (making it <see cref="TaskStatus.Faulted"/>).
        /// To get exceptions delivered asynchronously through the returned <see cref="Task{TResult}"/>, use the 
        /// <see cref="AsyncFuncExtensions.DeliverAsync{TResult}(Func{Task{TResult}})"/> extension method on the created delegate.
        /// </para>
        /// <para>
        /// This method is convenient when implementing a pair of method overloads for some delegate-based functionality,
        /// with one overload taking an <see cref="Func{TResult}"/> parameter, and the other an asynchronous 
        /// <see cref="Func{T}"/> of <see cref="Task{TResult}"/>,
        /// such as is the case for <see cref="Task.Run{TResult}(Func{TResult})"/> and <see cref="Task.Run{TResult}(Func{Task{TResult}})"/>.
        /// The function overload can be implemented by calling this <see cref="WrapAsync{TResult}(Func{TResult})"/> method
        /// on the <see cref="Func{TResult}"/> argument to convert it to an asynchronous <see cref="Func{T}"/> of <see cref="Task{TResult}"/>
        /// delegate returning a completed task with the former delegate's result, and then passing the created delegate
        /// to the asynchronous overload.
        /// </para>
        /// </remarks>
        /// <example>
        /// <code>
        /// public static TResult DoSomething&lt;TResult&gt;(Func&lt;TResult&gt; func)
        /// {
        ///     ArgumentValidate.NotNull(func, nameof(func));
        /// 
        ///     var asyncFunc = func.WrapAsync();
        ///     var task = DoSomething(asyncFunc);
        ///     return task.GetAwaiter().GetResult();   // task is always completed; returns immediately
        /// }
        /// 
        /// public static async Task&lt;TResult&gt; DoSomething&lt;TResult&gt;(Func&lt;Task&lt;TResult&gt;&gt; asyncFunc)
        /// {
        ///     ArgumentValidate.NotNull(asyncFunc, nameof(asyncFunc));
        /// 
        ///     // preprocessing
        /// 
        ///     try
        ///     {
        ///         return await asyncFunc().ConfigureAwait(false);
        ///     }
        ///     finally
        ///     {
        ///         // postprocessing
        ///     }
        /// }
        /// </code>
        /// </example>
        public static Func<Task<TResult>> WrapAsync<TResult>(this Func<TResult> func)
        {
            ArgumentValidate.NotNull(func, nameof(func));

            return () =>
            {
                var result = func();
                return Task.FromResult(result);
            };
        }
        
        /// <summary>
        /// Creates an asynchronous delegate that executes the specified function delegate synchronously
        /// and returns a task that has completed successfully with the said delegate's result
        /// (like through <see cref="Task.FromResult{TResult}(TResult)"/>).
        /// </summary>
        /// <typeparam name="T">The type of the parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="func">The function delegate to be executed synchronously by the asynchronous delegate.</param>
        /// <returns>The asynchronous delegate encapsulating <paramref name="func"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="WrapAsync{TResult}(Func{TResult})"/> overload.
        /// </remarks>
        public static Func<T, Task<TResult>> WrapAsync<T, TResult>(this Func<T, TResult> func)
        {
            ArgumentValidate.NotNull(func, nameof(func));

            return (T arg) =>
            {
                var result = func(arg);
                return Task.FromResult(result);
            };
        }
        
        /// <summary>
        /// Creates an asynchronous delegate that executes the specified function delegate synchronously
        /// and returns a task that has completed successfully with the said delegate's result
        /// (like through <see cref="Task.FromResult{TResult}(TResult)"/>).
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="func">The function delegate to be executed synchronously by the asynchronous delegate.</param>
        /// <returns>The asynchronous delegate encapsulating <paramref name="func"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="WrapAsync{TResult}(Func{TResult})"/> overload.
        /// </remarks>
        public static Func<T1, T2, Task<TResult>> WrapAsync<T1, T2, TResult>(this Func<T1, T2, TResult> func)
        {
            ArgumentValidate.NotNull(func, nameof(func));

            return (T1 arg1, T2 arg2) =>
            {
                var result = func(arg1, arg2);
                return Task.FromResult(result);
            };
        }
        
        /// <summary>
        /// Creates an asynchronous delegate that executes the specified function delegate synchronously
        /// and returns a task that has completed successfully with the said delegate's result
        /// (like through <see cref="Task.FromResult{TResult}(TResult)"/>).
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="func">The function delegate to be executed synchronously by the asynchronous delegate.</param>
        /// <returns>The asynchronous delegate encapsulating <paramref name="func"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="WrapAsync{TResult}(Func{TResult})"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, Task<TResult>> WrapAsync<T1, T2, T3, TResult>(this Func<T1, T2, T3, TResult> func)
        {
            ArgumentValidate.NotNull(func, nameof(func));

            return (T1 arg1, T2 arg2, T3 arg3) =>
            {
                var result = func(arg1, arg2, arg3);
                return Task.FromResult(result);
            };
        }
        
        /// <summary>
        /// Creates an asynchronous delegate that executes the specified function delegate synchronously
        /// and returns a task that has completed successfully with the said delegate's result
        /// (like through <see cref="Task.FromResult{TResult}(TResult)"/>).
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="func">The function delegate to be executed synchronously by the asynchronous delegate.</param>
        /// <returns>The asynchronous delegate encapsulating <paramref name="func"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="WrapAsync{TResult}(Func{TResult})"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, Task<TResult>> WrapAsync<T1, T2, T3, T4, TResult>(this Func<T1, T2, T3, T4, TResult> func)
        {
            ArgumentValidate.NotNull(func, nameof(func));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
            {
                var result = func(arg1, arg2, arg3, arg4);
                return Task.FromResult(result);
            };
        }
        
        /// <summary>
        /// Creates an asynchronous delegate that executes the specified function delegate synchronously
        /// and returns a task that has completed successfully with the said delegate's result
        /// (like through <see cref="Task.FromResult{TResult}(TResult)"/>).
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="func">The function delegate to be executed synchronously by the asynchronous delegate.</param>
        /// <returns>The asynchronous delegate encapsulating <paramref name="func"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="WrapAsync{TResult}(Func{TResult})"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, Task<TResult>> WrapAsync<T1, T2, T3, T4, T5, TResult>(this Func<T1, T2, T3, T4, T5, TResult> func)
        {
            ArgumentValidate.NotNull(func, nameof(func));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
            {
                var result = func(arg1, arg2, arg3, arg4, arg5);
                return Task.FromResult(result);
            };
        }
        
        /// <summary>
        /// Creates an asynchronous delegate that executes the specified function delegate synchronously
        /// and returns a task that has completed successfully with the said delegate's result
        /// (like through <see cref="Task.FromResult{TResult}(TResult)"/>).
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="func">The function delegate to be executed synchronously by the asynchronous delegate.</param>
        /// <returns>The asynchronous delegate encapsulating <paramref name="func"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="WrapAsync{TResult}(Func{TResult})"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, Task<TResult>> WrapAsync<T1, T2, T3, T4, T5, T6, TResult>(this Func<T1, T2, T3, T4, T5, T6, TResult> func)
        {
            ArgumentValidate.NotNull(func, nameof(func));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
            {
                var result = func(arg1, arg2, arg3, arg4, arg5, arg6);
                return Task.FromResult(result);
            };
        }
        
        /// <summary>
        /// Creates an asynchronous delegate that executes the specified function delegate synchronously
        /// and returns a task that has completed successfully with the said delegate's result
        /// (like through <see cref="Task.FromResult{TResult}(TResult)"/>).
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="func">The function delegate to be executed synchronously by the asynchronous delegate.</param>
        /// <returns>The asynchronous delegate encapsulating <paramref name="func"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="WrapAsync{TResult}(Func{TResult})"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, Task<TResult>> WrapAsync<T1, T2, T3, T4, T5, T6, T7, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, TResult> func)
        {
            ArgumentValidate.NotNull(func, nameof(func));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
            {
                var result = func(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
                return Task.FromResult(result);
            };
        }
        
        /// <summary>
        /// Creates an asynchronous delegate that executes the specified function delegate synchronously
        /// and returns a task that has completed successfully with the said delegate's result
        /// (like through <see cref="Task.FromResult{TResult}(TResult)"/>).
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="func">The function delegate to be executed synchronously by the asynchronous delegate.</param>
        /// <returns>The asynchronous delegate encapsulating <paramref name="func"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="WrapAsync{TResult}(Func{TResult})"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, Task<TResult>> WrapAsync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> func)
        {
            ArgumentValidate.NotNull(func, nameof(func));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) =>
            {
                var result = func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
                return Task.FromResult(result);
            };
        }
        
        /// <summary>
        /// Creates an asynchronous delegate that executes the specified function delegate synchronously
        /// and returns a task that has completed successfully with the said delegate's result
        /// (like through <see cref="Task.FromResult{TResult}(TResult)"/>).
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="func">The function delegate to be executed synchronously by the asynchronous delegate.</param>
        /// <returns>The asynchronous delegate encapsulating <paramref name="func"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="WrapAsync{TResult}(Func{TResult})"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, Task<TResult>> WrapAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> func)
        {
            ArgumentValidate.NotNull(func, nameof(func));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) =>
            {
                var result = func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
                return Task.FromResult(result);
            };
        }
        
        /// <summary>
        /// Creates an asynchronous delegate that executes the specified function delegate synchronously
        /// and returns a task that has completed successfully with the said delegate's result
        /// (like through <see cref="Task.FromResult{TResult}(TResult)"/>).
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="func">The function delegate to be executed synchronously by the asynchronous delegate.</param>
        /// <returns>The asynchronous delegate encapsulating <paramref name="func"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="WrapAsync{TResult}(Func{TResult})"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Task<TResult>> WrapAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> func)
        {
            ArgumentValidate.NotNull(func, nameof(func));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) =>
            {
                var result = func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
                return Task.FromResult(result);
            };
        }
        
        /// <summary>
        /// Creates an asynchronous delegate that executes the specified function delegate synchronously
        /// and returns a task that has completed successfully with the said delegate's result
        /// (like through <see cref="Task.FromResult{TResult}(TResult)"/>).
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T11">The type of the eleventh parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="func">The function delegate to be executed synchronously by the asynchronous delegate.</param>
        /// <returns>The asynchronous delegate encapsulating <paramref name="func"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="WrapAsync{TResult}(Func{TResult})"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Task<TResult>> WrapAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> func)
        {
            ArgumentValidate.NotNull(func, nameof(func));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) =>
            {
                var result = func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
                return Task.FromResult(result);
            };
        }
        
        /// <summary>
        /// Creates an asynchronous delegate that executes the specified function delegate synchronously
        /// and returns a task that has completed successfully with the said delegate's result
        /// (like through <see cref="Task.FromResult{TResult}(TResult)"/>).
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T11">The type of the eleventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T12">The type of the twelfth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="func">The function delegate to be executed synchronously by the asynchronous delegate.</param>
        /// <returns>The asynchronous delegate encapsulating <paramref name="func"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="WrapAsync{TResult}(Func{TResult})"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Task<TResult>> WrapAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> func)
        {
            ArgumentValidate.NotNull(func, nameof(func));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) =>
            {
                var result = func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
                return Task.FromResult(result);
            };
        }
        
        /// <summary>
        /// Creates an asynchronous delegate that executes the specified function delegate synchronously
        /// and returns a task that has completed successfully with the said delegate's result
        /// (like through <see cref="Task.FromResult{TResult}(TResult)"/>).
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T11">The type of the eleventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T12">The type of the twelfth parameter of the delegate.</typeparam>        
        /// <typeparam name="T13">The type of the thirteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="func">The function delegate to be executed synchronously by the asynchronous delegate.</param>
        /// <returns>The asynchronous delegate encapsulating <paramref name="func"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="WrapAsync{TResult}(Func{TResult})"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Task<TResult>> WrapAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> func)
        {
            ArgumentValidate.NotNull(func, nameof(func));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) =>
            {
                var result = func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
                return Task.FromResult(result);
            };
        }
        
        /// <summary>
        /// Creates an asynchronous delegate that executes the specified function delegate synchronously
        /// and returns a task that has completed successfully with the said delegate's result
        /// (like through <see cref="Task.FromResult{TResult}(TResult)"/>).
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T11">The type of the eleventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T12">The type of the twelfth parameter of the delegate.</typeparam>        
        /// <typeparam name="T13">The type of the thirteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T14">The type of the fourteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="func">The function delegate to be executed synchronously by the asynchronous delegate.</param>
        /// <returns>The asynchronous delegate encapsulating <paramref name="func"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="WrapAsync{TResult}(Func{TResult})"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Task<TResult>> WrapAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> func)
        {
            ArgumentValidate.NotNull(func, nameof(func));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) =>
            {
                var result = func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
                return Task.FromResult(result);
            };
        }
        
        /// <summary>
        /// Creates an asynchronous delegate that executes the specified function delegate synchronously
        /// and returns a task that has completed successfully with the said delegate's result
        /// (like through <see cref="Task.FromResult{TResult}(TResult)"/>).
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T11">The type of the eleventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T12">The type of the twelfth parameter of the delegate.</typeparam>        
        /// <typeparam name="T13">The type of the thirteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T14">The type of the fourteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T15">The type of the fifteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="func">The function delegate to be executed synchronously by the asynchronous delegate.</param>
        /// <returns>The asynchronous delegate encapsulating <paramref name="func"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="WrapAsync{TResult}(Func{TResult})"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, Task<TResult>> WrapAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> func)
        {
            ArgumentValidate.NotNull(func, nameof(func));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) =>
            {
                var result = func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15);
                return Task.FromResult(result);
            };
        }
        
        /// <summary>
        /// Creates an asynchronous delegate that executes the specified function delegate synchronously
        /// and returns a task that has completed successfully with the said delegate's result
        /// (like through <see cref="Task.FromResult{TResult}(TResult)"/>).
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter of the delegate.</typeparam>        
        /// <typeparam name="T2">The type of the second parameter of the delegate.</typeparam>        
        /// <typeparam name="T3">The type of the third parameter of the delegate.</typeparam>        
        /// <typeparam name="T4">The type of the fourth parameter of the delegate.</typeparam>        
        /// <typeparam name="T5">The type of the fifth parameter of the delegate.</typeparam>        
        /// <typeparam name="T6">The type of the sixth parameter of the delegate.</typeparam>        
        /// <typeparam name="T7">The type of the seventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T8">The type of the eighth parameter of the delegate.</typeparam>        
        /// <typeparam name="T9">The type of the ninth parameter of the delegate.</typeparam>        
        /// <typeparam name="T10">The type of the tenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T11">The type of the eleventh parameter of the delegate.</typeparam>        
        /// <typeparam name="T12">The type of the twelfth parameter of the delegate.</typeparam>        
        /// <typeparam name="T13">The type of the thirteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T14">The type of the fourteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T15">The type of the fifteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="T16">The type of the sixteenth parameter of the delegate.</typeparam>        
        /// <typeparam name="TResult">The type of the return value of the delegate.</typeparam>        
        /// <param name="func">The function delegate to be executed synchronously by the asynchronous delegate.</param>
        /// <returns>The asynchronous delegate encapsulating <paramref name="func"/>.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is <see langword="null"/>.</exception>
        /// <remarks>
        /// Refer to the remarks on the <see cref="WrapAsync{TResult}(Func{TResult})"/> overload.
        /// </remarks>
        public static Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, Task<TResult>> WrapAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> func)
        {
            ArgumentValidate.NotNull(func, nameof(func));

            return (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) =>
            {
                var result = func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16);
                return Task.FromResult(result);
            };
        }
        
    }
}