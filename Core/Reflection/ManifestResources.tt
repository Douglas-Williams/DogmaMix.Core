<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>

//----------------------------------------------------------------------------------------------------
// <auto-generated> 
//     This code was generated by a T4 template: <#= Path.GetFileName(Host.TemplateFile) #>
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated. 
// </auto-generated> 
//----------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using DogmaMix.Core.Extensions;

namespace DogmaMix.Core
{
    /// <summary>
    /// Provides properties and methods for retrieving manifest resources (also known as embedded resources) from the current assembly.
    /// These properties and methods provide compile-time checking and IntelliSense for the manifest resource names,
    /// which is preferable over the standard approach of supplying hardcoded strings to the 
    /// <see cref="Assembly.GetManifestResourceStream(string)"/> method.
    /// </summary>
    /// <remarks>
    /// <para>
    /// MSBuild has an internal set of rules for constructing resource names, involving escaped representations 
    /// of the project default namespace, resource relative directory path, and resource filename. 
    /// The template that generated this class introduces &lt;LogicalName&gt; elements in the project file to simplify this naming.
    /// </para>
    /// <list type="bullet">
    /// <listheader>See Also</listheader>
    /// <item><see href="http://stackoverflow.com/a/3314213/1149773">How to read embedded resource text file</see> (answer), <i>Stack Overflow</i></item>
    /// <item><see href="https://social.msdn.microsoft.com/Forums/vstudio/en-US/632d6914-8c90-450e-8ea0-fa60d2c3b6b6/">Manifest name for Embedded resources</see>, <i>MSDN Forums</i></item>
    /// </list>
    /// </remarks>
    internal static class ManifestResources
    {
<#
    var csprojPath = Host.ResolveAssemblyReference("$(ProjectPath)");
    var csprojDocument = XDocument.Load(csprojPath, LoadOptions.PreserveWhitespace);
    XNamespace ns = "http://schemas.microsoft.com/developer/msbuild/2003";
    var resourceElements = csprojDocument
        .Element(ns + "Project")
        .Elements(ns + "ItemGroup")
        .SelectMany(itemGroup => itemGroup.Elements(ns + "EmbeddedResource"))
        .ToArray();      

    bool csprojChanged = false;
    foreach (var resourceElement in resourceElements)
    {
        string resourcePath = (string)resourceElement.Attribute("Include");
        if (resourcePath.EndsWith(".resx"))
            continue;

        string resourceName;
        var logicalNameElement = resourceElement.Element(ns + "LogicalName");
        if (logicalNameElement != null)
        {
            resourceName = logicalNameElement.Value;
        }
        else
        {
            resourceName = Path.GetFileName(resourcePath);

            resourceElement.Add(new XElement(ns + "LogicalName", resourceName));
            csprojChanged = true;
        }
        
        string resourcePropertyName = Regex.Replace(resourceName, @"[\W]+", "_");
#>
        /// <summary>
        /// Loads the manifest resource "<#=resourceName#>" from this assembly.
        /// </summary>
        /// <returns>
        /// The manifest resource.
        /// The caller is responsible for disposing of this stream when done with it.
        /// </returns>
        public static Stream Get<#=resourcePropertyName#>() => GetManifestResourceStream(@"<#=resourceName#>");

        private static readonly Lazy<byte[]> _<#=resourcePropertyName#> = new Lazy<byte[]>(() =>
            GetManifestResourceBytes(@"<#=resourceName#>"));
        
        /// <summary>
        /// Gets the cached byte array for the manifest resource "<#=resourceName#>" from this assembly.
        /// </summary>
        public static byte[] <#=resourcePropertyName#> => _<#=resourcePropertyName#>.Value;

<#
    }
#>
        private static Stream GetManifestResourceStream(string resourceName)
        {
            var assembly = Assembly.GetExecutingAssembly();
            var resourceStream = assembly.GetManifestResourceStream(resourceName);            
            if (resourceStream == null)
                throw new InvalidOperationException($"Manifest resource \"{resourceName}\" was not found in the assembly.");
                
            return resourceStream;
        }

        private static byte[] GetManifestResourceBytes(string resourceName)
        {
            using (var resourceStream = GetManifestResourceStream(resourceName))
                return resourceStream.ReadToEnd();
        }
<#
    if (csprojChanged)
        csprojDocument.Save(csprojPath);
#>
    }
}