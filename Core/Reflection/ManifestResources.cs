
//----------------------------------------------------------------------------------------------------
// <auto-generated> 
//     This code was generated by a T4 template: ManifestResources.tt
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated. 
// </auto-generated> 
//----------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using DogmaMix.Core.Extensions;

namespace DogmaMix.Core
{
    /// <summary>
    /// Provides properties and methods for retrieving manifest resources (also known as embedded resources) from the current assembly.
    /// These properties and methods provide compile-time checking and IntelliSense for the manifest resource names,
    /// which is preferable over the standard approach of supplying hardcoded strings to the 
    /// <see cref="Assembly.GetManifestResourceStream(string)"/> method.
    /// </summary>
    /// <remarks>
    /// <para>
    /// MSBuild has an internal set of rules for constructing resource names, involving escaped representations 
    /// of the project default namespace, resource relative directory path, and resource filename. 
    /// The template that generated this class introduces &lt;LogicalName&gt; elements in the project file to simplify this naming.
    /// </para>
    /// <list type="bullet">
    /// <listheader>References</listheader>
    /// <item><see href="http://stackoverflow.com/a/3314213/1149773">How to read embedded resource text file</see> (answer), <i>Stack Overflow</i></item>
    /// <item><see href="https://social.msdn.microsoft.com/Forums/vstudio/en-US/632d6914-8c90-450e-8ea0-fa60d2c3b6b6/">Manifest name for Embedded resources</see>, <i>MSDN Forums</i></item>
    /// </list>
    /// </remarks>
    internal static class ManifestResources
    {
        /// <summary>
        /// Loads the manifest resource "xhtml11-flat.dtd" from this assembly.
        /// </summary>
        /// <returns>
        /// The manifest resource.
        /// The caller is responsible for disposing of this stream when done with it.
        /// </returns>
        public static Stream Getxhtml11_flat_dtd() => GetManifestResourceStream(@"xhtml11-flat.dtd");

        private static readonly Lazy<byte[]> _xhtml11_flat_dtd = new Lazy<byte[]>(() =>
            GetManifestResourceBytes(@"xhtml11-flat.dtd"));
        
        /// <summary>
        /// Gets the cached byte array for the manifest resource "xhtml11-flat.dtd" from this assembly.
        /// </summary>
        public static byte[] xhtml11_flat_dtd => _xhtml11_flat_dtd.Value;

        private static Stream GetManifestResourceStream(string resourceName)
        {
            var assembly = Assembly.GetExecutingAssembly();
            var resourceStream = assembly.GetManifestResourceStream(resourceName);            
            if (resourceStream == null)
                throw new InvalidOperationException($"Manifest resource \"{resourceName}\" was not found in the assembly.");
                
            return resourceStream;
        }

        private static byte[] GetManifestResourceBytes(string resourceName)
        {
            using (var resourceStream = GetManifestResourceStream(resourceName))
                return resourceStream.ReadToEnd();
        }
    }
}