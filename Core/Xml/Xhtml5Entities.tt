<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".dtd" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<!--
   <auto-generated> 
       This code was generated by a T4 template: <#= Path.GetFileName(Host.TemplateFile) #>
       Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
   </auto-generated>
-->

<!--
   This document uses content from the WHATWG HTML specification.
   https://html.spec.whatwg.org/multipage/syntax.html#named-character-references
   https://html.spec.whatwg.org/entities.json
   " Parts of this specification are © Copyright 2004-2014 Apple Inc., Mozilla Foundation,
     and Opera Software ASA. You are granted a license to use, reproduce and create derivative 
     works of this document. "
-->

<#
    // See also:
    // https://www.w3.org/TR/html5/syntax.html#named-character-references
        
    string json;
    using (var webClient = new WebClient())
        json = webClient.DownloadString("https://html.spec.whatwg.org/entities.json");
    
    var entities = Parse(json);

    foreach (var entity in entities)
    {
#>
<!ENTITY <#=entity.Name#> "<#=entity.NumericReference#>"> <!-- "<#=entity.UnicodeString#>" – <#=entity.Source#> -->
<#
    }
#>

<#+
private static IList<Entity> Parse(string json)
{
    // Use regular expressions until the System.Json namespace is incorporated
    // in the .NET Framework Class Library.

    // The HTML specification implies that names of named character references
    // must only consist of alphanumeric ASCII characters.

    return Regex
        .Matches(json, @"\""&(?<name>[A-Za-z0-9]+);\"": \{ ""codepoints"": \[(?<codepoints>\d+)(, (?<codepoints>\d+))*\][^}]+\}")
        .Cast<Match>()
        .Select(Entity.Parse)
        .OrderBy(e => e.Name, StringComparer.OrdinalIgnoreCase)
        .ToList();
}

private class Entity
{
    public string Source { get; private set; }
    public string Name { get; private set; }
    public int[] Codepoints { get; private set; }
    public string NumericReference { get; private set; }
    public string UnicodeString { get; private set; }

    public static Entity Parse(Match match)
    {
        var entity = new Entity
        {
            Source = match.Value,
            Name = match.Groups["name"].Value,
            Codepoints = match
                .Groups["codepoints"]
                .Captures
                .Cast<Capture>()
                .Select(c => int.Parse(c.Value))
                .ToArray(),
        };
        
        // Based on xhtml11-flat.dtd, '&' and '<' should be doubly escaped.
        entity.NumericReference = string
            .Concat(entity.Codepoints.Select(c => "&#" + c + ";"))
            .Replace("&#38;", "&#38;#38;")
            .Replace("&#60;", "&#38;#60;");
        
        entity.UnicodeString = string.Concat(entity.Codepoints.Select(Char.ConvertFromUtf32));
        if ("\r\n".Any(entity.UnicodeString.Contains))
            entity.UnicodeString = "(removed)";

        return entity;
    }
}
#>