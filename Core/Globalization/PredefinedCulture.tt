<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>

//----------------------------------------------------------------------------------------------------
// <auto-generated> 
//     This code was generated by a T4 template: <#= Path.GetFileName(Host.TemplateFile) #>
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated. 
// </auto-generated> 
//----------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading.Tasks;

namespace DogmaMix.Core.Globalization
{
    /// <summary>
    /// Provides static properties for retrieving each predefined neutral culture and specific culture.
    /// </summary>
    /// <remarks>
    /// <para>
    /// The static properties in this class are auto-generated by calling the <see cref="CultureInfo.GetCultures"/> method
    /// of the <see cref="CultureInfo"/> class, which gets the list of supported cultures on the current operating system.
    /// The list of supported cultures may change across different operating systems; therefore, some of the static properties 
    /// may throw a <see cref="CultureNotFoundException"/> if accessed on another operating system.
    /// For the list of supported cultures on different versions of Microsoft Windows, refer to the
    /// <see href="https://msdn.microsoft.com/en-us/goglobal/bb896001.aspx">National Language Support (NLS) API Reference</see>.
    /// </para>
    /// </remarks>
    public static class PredefinedCulture
    {
<#
    var cultures = CultureInfo
        .GetCultures(CultureTypes.NeutralCultures | CultureTypes.SpecificCultures)
        .OrderBy(c => c.EnglishName);
      
    var culturesByEnglishName = cultures.ToLookup(c => c.EnglishName);

    foreach (var culture in cultures)
    {
        bool isSpecific = (culture.CultureTypes & CultureTypes.SpecificCultures) != 0;
        bool isNeutral = (culture.CultureTypes & CultureTypes.NeutralCultures) != 0;
        string cultureType = isSpecific ? "specific " : isNeutral ? "neutral " : "";

        string propertyName = Regex.Replace(culture.EnglishName, @"\W+", "");

        // There is a conflict between the neutral and specific culture for Persian‎.
        if (isSpecific && culturesByEnglishName[culture.EnglishName].Count() > 1)
            propertyName += "Specific";

#>
        /// <summary>
        /// Gets a cached, read-only instance of the <#=cultureType#>culture for <#=culture.EnglishName#>.
        /// Culture name: "<#=culture.Name#>".
        /// </summary>
        /// <exception cref="CultureNotFoundException">The culture is not supported by the current operating system.</exception>
        public static CultureInfo <#=propertyName#> => CultureInfo.GetCultureInfo("<#=culture.Name#>");

<#
    }
#>
    }
}